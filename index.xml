<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Mike Thomsen's Blog</title><link>https://mikethomsen.github.io/</link><description></description><lastBuildDate>Sun, 22 Nov 2020 11:59:00 -0500</lastBuildDate><item><title>S230 is still a problematic law</title><link>https://mikethomsen.github.io/posts/2020/11/22/s230-is-still-a-problematic-law/</link><description>&lt;p&gt;First of all, I admit that there were some really good counter-points at HN to some of the issues I raised. One of which was Barnes v Yahoo!, however many of the commenters failed to note that I raised quite a few scenarios that they didn't address. Some of those …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mike Thomsen</dc:creator><pubDate>Sun, 22 Nov 2020 11:59:00 -0500</pubDate><guid isPermaLink="false">tag:mikethomsen.github.io,2020-11-22:/posts/2020/11/22/s230-is-still-a-problematic-law/</guid><category>opinion</category><category>politics</category><category>s230</category></item><item><title>Countering burnout in open source development</title><link>https://mikethomsen.github.io/posts/2020/11/21/countering-burnout-in-open-source-development/</link><description>&lt;blockquote&gt;
&lt;p&gt;But open source success, Thornton quickly found, has a dark side. He felt inundated. Countless people wrote him and Otto every week with bug reports, demands for new features, questions, praise. Thornton would finish his day job and then spend four or five hours every night frantically working on Bootstrap …&lt;/p&gt;&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mike Thomsen</dc:creator><pubDate>Sat, 21 Nov 2020 09:01:00 -0500</pubDate><guid isPermaLink="false">tag:mikethomsen.github.io,2020-11-21:/posts/2020/11/21/countering-burnout-in-open-source-development/</guid><category>opinion</category><category>opensource</category></item><item><title>How to use ScriptedTransformRecord to simplify bulk data cleanup</title><link>https://mikethomsen.github.io/posts/2020/11/20/how-to-use-scriptedtransformrecord-to-simplify-bulk-data-cleanup/</link><description>&lt;p&gt;Apache NiFi 1.12.0 introduced the new &lt;code&gt;ScriptedTransformRecord&lt;/code&gt; processor, which is basically &lt;code&gt;ExecuteScript&lt;/code&gt; focused on reprocessing record sets. It's a very powerful new tool for rapidly transforming and cleaning up data.&lt;/p&gt;
&lt;p&gt;The structure of a script that works with it is very simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setValue&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;SomeField&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;myValue&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;record&lt;/span&gt; &lt;span class="c1"&gt;//Returns …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mike Thomsen</dc:creator><pubDate>Fri, 20 Nov 2020 15:19:00 -0500</pubDate><guid isPermaLink="false">tag:mikethomsen.github.io,2020-11-20:/posts/2020/11/20/how-to-use-scriptedtransformrecord-to-simplify-bulk-data-cleanup/</guid><category>tutorial</category><category>nifi</category><category>scripting</category><category>scriptedtransformrecord</category></item><item><title>Building all new record sets with ScriptedTransformRecord</title><link>https://mikethomsen.github.io/posts/2020/11/19/building-all-new-record-sets-with-scriptedtransformrecord/</link><description>&lt;p&gt;Nifi 1.12.0 introduced the &lt;code&gt;ScriptedTransformRecord&lt;/code&gt; processor, which is similar to &lt;code&gt;ExecuteScript&lt;/code&gt;, but designed around record data. It provides a very slick and easy to use environment to cleanup and mutate record sets in a performant way on those use cases which require more than what something like &lt;code&gt;UpdateRecord …&lt;/code&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mike Thomsen</dc:creator><pubDate>Thu, 19 Nov 2020 16:18:00 -0500</pubDate><guid isPermaLink="false">tag:mikethomsen.github.io,2020-11-19:/posts/2020/11/19/building-all-new-record-sets-with-scriptedtransformrecord/</guid><category>tutorial</category><category>nifi</category><category>scripting</category><category>scriptedtransformrecord</category></item><item><title>S230, the two-faced "free speech law"</title><link>https://mikethomsen.github.io/posts/2020/11/16/s230-the-two-faced-free-speech-law/</link><description>&lt;p&gt;Disclaimer: IANAL, and I don't pretend to play one on YouTube.&lt;/p&gt;
&lt;p&gt;Update: &lt;a href="https://mikethomsen.github.io/posts/2020/11/16/s230-the-two-faced-free-speech-law/"&gt;follow up&lt;/a&gt; inspired by some interesting feedback from HN.&lt;/p&gt;
&lt;p&gt;S230 is supposed to be the great protector of free speech, and it has contributed a lot to that effect. However, its defenders often gloss over the fact that …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mike Thomsen</dc:creator><pubDate>Mon, 16 Nov 2020 16:32:00 -0500</pubDate><guid isPermaLink="false">tag:mikethomsen.github.io,2020-11-16:/posts/2020/11/16/s230-the-two-faced-free-speech-law/</guid><category>opinion</category><category>politics</category><category>s230</category></item><item><title>Testing ExecuteScript modules with the NiFi test framework</title><link>https://mikethomsen.github.io/posts/2020/11/08/testing-executescript-modules-with-the-nifi-test-framework/</link><description>&lt;p&gt;In the &lt;a href="https://mikethomsen.github.io/posts/2020/11/06/taking-executescript-to-the-next-level-with-fat-jars/"&gt;previous post&lt;/a&gt;, I showed how to easily build a fat jar that can bring in existing external code into a NiFi flow without building a custom processor. Testing it thoroughly requires a few extra steps to get as close as possible to mimicking a live NiFi environment.&lt;/p&gt;
&lt;p&gt;This …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mike Thomsen</dc:creator><pubDate>Sun, 08 Nov 2020 10:17:00 -0500</pubDate><guid isPermaLink="false">tag:mikethomsen.github.io,2020-11-08:/posts/2020/11/08/testing-executescript-modules-with-the-nifi-test-framework/</guid><category>tutorial</category><category>nifi</category><category>scripting</category><category>groovy</category></item><item><title>Taking ExecuteScript to the next level with fat jars</title><link>https://mikethomsen.github.io/posts/2020/11/06/taking-executescript-to-the-next-level-with-fat-jars/</link><description>&lt;p&gt;While NiFi has a lot of power out of the box, there are times where you need to write a big script that depend on external libraries. A lof the time this happens because you get really bad data and have to untangle it with a lot of conditional changes …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mike Thomsen</dc:creator><pubDate>Fri, 06 Nov 2020 18:12:00 -0500</pubDate><guid isPermaLink="false">tag:mikethomsen.github.io,2020-11-06:/posts/2020/11/06/taking-executescript-to-the-next-level-with-fat-jars/</guid><category>tutorial</category><category>nifi</category><category>scripting</category><category>groovy</category></item><item><title>Querying a Gremlin-enabled graph database with NiFi</title><link>https://mikethomsen.github.io/posts/2020/10/31/querying-a-gremlin-enabled-graph-database-with-nifi/</link><description>&lt;p&gt;The graph bundle is not part of the standard NiFi convenience binaries, but it's available for download from Maven Central. To get started with it, grab the versions of the following NAR files that correspond to your version of NiFi:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://search.maven.org/search?q=a:nifi-graph-client-service-api-nar"&gt;nifi-graph-client-service-api-nar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://search.maven.org/search?q=a:nifi-graph-nar"&gt;nifi-graph-nar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://search.maven.org/search?q=a:nifi-other-graph-services-nar"&gt;nifi-other-graph-services-nar&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Put all three of them in either …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mike Thomsen</dc:creator><pubDate>Sat, 31 Oct 2020 00:00:00 -0400</pubDate><guid isPermaLink="false">tag:mikethomsen.github.io,2020-10-31:/posts/2020/10/31/querying-a-gremlin-enabled-graph-database-with-nifi/</guid><category>tutorial</category><category>nifi</category><category>graph</category><category>gremlin</category></item><item><title>The Retweet, a cautionary tale in feature design</title><link>https://mikethomsen.github.io/posts/2020/10/30/the-retweet-a-cautionary-tale-in-feature-design/</link><description>&lt;p&gt;In a quick &lt;a href="https://www.linkedin.com/posts/mike-thomsen-780341191_the-retweet-is-an-unsung-example-of-an-idea-activity-6727366455811166208-G801"&gt;post on LinkedIn&lt;/a&gt;, I singled out the Retweet as a great example of a much-loved feature that has turned out to be an unmitigated disaster for not just Twitter, but all of its peers. It's worth expanding on those points because it's a fascinating case in the …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mike Thomsen</dc:creator><pubDate>Fri, 30 Oct 2020 18:52:00 -0400</pubDate><guid isPermaLink="false">tag:mikethomsen.github.io,2020-10-30:/posts/2020/10/30/the-retweet-a-cautionary-tale-in-feature-design/</guid><category>opinion</category><category>social-media</category></item><item><title>Creating date-based Elasticsearch indexes with Apache Nifi</title><link>https://mikethomsen.github.io/posts/2020/10/26/creating-date-based-elasticsearch-indexes-with-apache-nifi/</link><description>&lt;p&gt;One of the many cool features of Elasticsearch is that it is able to use a feature called &lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/index-templates.html"&gt;Index Templates&lt;/a&gt; to create new indexes on the fly when you POST data to indexes that match a particular defined pattern. One of the reasons you'd want to do this sort of …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mike Thomsen</dc:creator><pubDate>Mon, 26 Oct 2020 00:00:00 -0400</pubDate><guid isPermaLink="false">tag:mikethomsen.github.io,2020-10-26:/posts/2020/10/26/creating-date-based-elasticsearch-indexes-with-apache-nifi/</guid><category>tutorial</category><category>elasticsearch</category><category>nifi</category></item><item><title>Getting NiFi optional features with Maven</title><link>https://mikethomsen.github.io/posts/2020/10/20/getting-nifi-optional-features-with-maven/</link><description>&lt;p&gt;The binaries that are available for download on the &lt;a href="http://nifi.apache.org"&gt;NiFi website&lt;/a&gt; only contain the most essential NAR files because the whole NiFi build is simply too large for many of our mirrors. Fortunately, you have multiple ways to get access to these binaries. You can download them from the &lt;a href="http://search.maven.org"&gt;Maven …&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mike Thomsen</dc:creator><pubDate>Tue, 20 Oct 2020 11:01:00 -0400</pubDate><guid isPermaLink="false">tag:mikethomsen.github.io,2020-10-20:/posts/2020/10/20/getting-nifi-optional-features-with-maven/</guid><category>tutorial</category><category>nifi</category><category>graph</category></item><item><title>"Data Engineering Recipe: Normalizing different input files with minimal code"</title><link>https://mikethomsen.github.io/posts/2019/09/13/data-engineering-recipe-normalizing-different-input-files-with-minimal-code/</link><description>&lt;blockquote&gt;
&lt;p&gt;Scenario: you get CSV files that relate to the same problem domain, but they have different headers.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;One of the problems that we've faced in the past where I work is that our clients can get data that falls in the same problem domain from different sources, but they need …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mike Thomsen</dc:creator><pubDate>Fri, 13 Sep 2019 08:50:00 -0400</pubDate><guid isPermaLink="false">tag:mikethomsen.github.io,2019-09-13:/posts/2019/09/13/data-engineering-recipe-normalizing-different-input-files-with-minimal-code/</guid><category>tutorial</category><category>nifi</category><category>data-engineering</category></item><item><title>Containerizing NiFi ETL processes</title><link>https://mikethomsen.github.io/posts/2019/08/16/containerizing-nifi-etl-processes/</link><description>&lt;h2&gt;Disclaimer&lt;/h2&gt;
&lt;p&gt;The preferred approach to managing NiFi in most cases is through the &lt;a href="https://nifi.apache.org/registry.html"&gt;NiFi Registry&lt;/a&gt;. It's an awesome tool that puts a lot of really powerful change management tools into your hands for developing, snapshotting and promoting flows between environments. The purpose of this blog post isn't to recommend an …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mike Thomsen</dc:creator><pubDate>Fri, 16 Aug 2019 00:00:00 -0400</pubDate><guid isPermaLink="false">tag:mikethomsen.github.io,2019-08-16:/posts/2019/08/16/containerizing-nifi-etl-processes/</guid><category>tutorial</category><category>nifi</category><category>containers</category><category>docker</category></item><item><title>Making NiFi components searchable</title><link>https://mikethomsen.github.io/posts/2019/06/27/making-nifi-components-searchable/</link><description>&lt;p&gt;If you have a NiFi component that you work on for your business/team, you can make it searchable using the &lt;code&gt;Searchable&lt;/code&gt; interface. The following code sample is taken from &lt;a href="https://issues.apache.org/jira/browse/NIFI-4406"&gt;NIFI-4406&lt;/a&gt;, which makes &lt;code&gt;ExecuteScript&lt;/code&gt; searchable so that you can search for words inside of either the script body property or …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mike Thomsen</dc:creator><pubDate>Thu, 27 Jun 2019 00:00:00 -0400</pubDate><guid isPermaLink="false">tag:mikethomsen.github.io,2019-06-27:/posts/2019/06/27/making-nifi-components-searchable/</guid><category>tutorial</category><category>nifi</category></item><item><title>Announcing the Apache NiFi Test Harness</title><link>https://mikethomsen.github.io/posts/2019/03/20/announcing-the-apache-nifi-test-harness/</link><description>&lt;p&gt;&lt;a href="https://github.com/peter-gergely-horvath/"&gt;Peter Horvath&lt;/a&gt; provided us with a great new feature pull request that adds a test harness for running a live NiFi instance within a JUnit integration test. For now, the feature is only officially included in the unreleased 1.10.0-SNAPSHOT code on GitHub, but I put out a stable …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mike Thomsen</dc:creator><pubDate>Wed, 20 Mar 2019 00:00:00 -0400</pubDate><guid isPermaLink="false">tag:mikethomsen.github.io,2019-03-20:/posts/2019/03/20/announcing-the-apache-nifi-test-harness/</guid><category>tutorial</category><category>nifi</category></item><item><title>A data engineering perspective on MongoDB</title><link>https://mikethomsen.github.io/posts/2019/02/24/a-data-engineering-perspective-on-mongodb/</link><description>&lt;p&gt;I came late to the game with MongoDB, having my first real professional experience with it in 2017 and doing a lot of work with refactoring the Apache NiFi support for it in 2017 through 2018. Over the years, I had seen lots of people attacking it and telling me …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mike Thomsen</dc:creator><pubDate>Sun, 24 Feb 2019 00:00:00 -0500</pubDate><guid isPermaLink="false">tag:mikethomsen.github.io,2019-02-24:/posts/2019/02/24/a-data-engineering-perspective-on-mongodb/</guid><category>opinion</category><category>mongodb</category><category>data-engineering</category></item><item><title>Using the S3 Processors with Minio</title><link>https://mikethomsen.github.io/posts/2019/02/18/using-the-s3-processors-with-minio/</link><description>&lt;p&gt;&lt;a href="https://minio.io/"&gt;Minio&lt;/a&gt; is a small S3-compatible server that can be really useful for internal use. To set it up with NiFi, &lt;a href="https://minio.io/downloads.html"&gt;download&lt;/a&gt; it an run it with this command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;./minio server ./minio_data&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It will then print out some information that looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Endpoint&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="mf"&gt;192.168&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;1.151&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;9000&lt;/span&gt;  &lt;span class="n"&gt;http …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mike Thomsen</dc:creator><pubDate>Mon, 18 Feb 2019 00:00:00 -0500</pubDate><guid isPermaLink="false">tag:mikethomsen.github.io,2019-02-18:/posts/2019/02/18/using-the-s3-processors-with-minio/</guid><category>tutorial</category><category>aws</category><category>minio</category><category>s3</category><category>nifi</category></item><item><title>Configuring OpenCypher and SSL on JanusGraph</title><link>https://mikethomsen.github.io/posts/2019/02/17/configuring-opencypher-and-ssl-on-janusgraph/</link><description>&lt;p&gt;OpenCypher is an implementation of the &lt;a href="https://en.wikipedia.org/wiki/Cypher_Query_Language"&gt;Cypher Query Language&lt;/a&gt; for graph databases other than Neo4J. This tutorial explains how to set up OpenCypher and SSL support in &lt;a href="https://github.com/JanusGraph/janusgraph/releases/tag/v0.3.1"&gt;JanusGraph 0.3.1&lt;/a&gt;. Newer versions of JanusGraph will hopefully use the newer TinkerPop 3.3.5+ configuration options to allow you to …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mike Thomsen</dc:creator><pubDate>Sun, 17 Feb 2019 00:00:00 -0500</pubDate><guid isPermaLink="false">tag:mikethomsen.github.io,2019-02-17:/posts/2019/02/17/configuring-opencypher-and-ssl-on-janusgraph/</guid><category>tutorial</category><category>graph</category></item><item><title>Using Python to process data from Apache NiFi</title><link>https://mikethomsen.github.io/posts/2019/02/09/using-python-to-process-data-from-apache-nifi/</link><description>&lt;p&gt;The scripting bundle that ships with the standard distribution of Apache NiFi is great for developers comfortable with the Java Virtual Machine, but doesn't provide much for people that want to use something like Python 3.X to process data in their flows. While you could write a REST service …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mike Thomsen</dc:creator><pubDate>Sat, 09 Feb 2019 00:00:00 -0500</pubDate><guid isPermaLink="false">tag:mikethomsen.github.io,2019-02-09:/posts/2019/02/09/using-python-to-process-data-from-apache-nifi/</guid><category>tutorial</category><category>python</category><category>nifi</category></item><item><title>Using Excel with Apache NiFi to make user data exchanges easier</title><link>https://mikethomsen.github.io/posts/2018/12/08/using-excel-with-apache-nifi-to-make-user-data-exchanges-easier/</link><description>&lt;p&gt;It's very common in many situations for data engineers and others working with an organization's data to run into one or more situations where the data is delivered by people who just load it up in a spreadsheet and send it over. In most cases, they don't know better and …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mike Thomsen</dc:creator><pubDate>Sat, 08 Dec 2018 00:00:00 -0500</pubDate><guid isPermaLink="false">tag:mikethomsen.github.io,2018-12-08:/posts/2018/12/08/using-excel-with-apache-nifi-to-make-user-data-exchanges-easier/</guid><category>tutorial</category><category>nifi</category></item><item><title>How to script a NiFi LookupService</title><link>https://mikethomsen.github.io/posts/2018/12/07/how-to-script-a-nifi-lookupservice/</link><description>&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;A while back, the concept of "lookup Services" was added to the Record API in Apache NiFi. The Record API was great, but it needed a clean way to enrich a record set that didn't involve parsing the entire record set and feeding it record-by-record to a script or …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mike Thomsen</dc:creator><pubDate>Fri, 07 Dec 2018 00:00:00 -0500</pubDate><guid isPermaLink="false">tag:mikethomsen.github.io,2018-12-07:/posts/2018/12/07/how-to-script-a-nifi-lookupservice/</guid><category>tutorial</category><category>nifi</category><category>groovy</category></item><item><title>Extracting emails from PST files with Apache NiFi</title><link>https://mikethomsen.github.io/posts/2018/11/16/extracting-emails-from-pst-files-with-apache-nifi/</link><description>&lt;p&gt;Why would you want to use NiFi to rip into Outlook PST files? Many reasons, ranging from helping with corporate legal compliance to forensics examinations. Perhaps even just to move email archives off the cloud and into an ElasticSearch cluster that is run by the local IT department to save …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mike Thomsen</dc:creator><pubDate>Fri, 16 Nov 2018 00:00:00 -0500</pubDate><guid isPermaLink="false">tag:mikethomsen.github.io,2018-11-16:/posts/2018/11/16/extracting-emails-from-pst-files-with-apache-nifi/</guid><category>tutorial</category><category>nifi</category><category>forensics</category><category>email</category></item><item><title>NiFi Data Generation Bundle 1.8.0 Released</title><link>https://mikethomsen.github.io/posts/2018/11/04/nifi-data-generation-bundle-180-released/</link><description>&lt;p&gt;Data generation bundle has been updated to support NiFi 1.8.0. The GenerateRecord processor now supports expression language, enabling scenarios like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;UserStatus&amp;quot;,
  &amp;quot;type&amp;quot;: &amp;quot;record&amp;quot;,
  &amp;quot;fields&amp;quot;: [
    {
      &amp;quot;name&amp;quot;: &amp;quot;login_status&amp;quot;,
      &amp;quot;type&amp;quot;: {
        &amp;quot;name&amp;quot;: &amp;quot;flag_enum&amp;quot;,
        &amp;quot;type&amp;quot;: &amp;quot;enum&amp;quot;,
        &amp;quot;symbols&amp;quot;: [ &amp;quot;LOGIN&amp;quot;, &amp;quot;LOGOUT&amp;quot;, &amp;quot;REJECTED&amp;quot; ]
      }
    },
    {
      &amp;quot;name&amp;quot;: &amp;quot;timestamp&amp;quot;,
      &amp;quot;type&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;long&amp;quot;,
        &amp;quot;logicalType&amp;quot;: &amp;quot;timestamp-millis&amp;quot;,
        &amp;quot;arg.properties&amp;quot;: {
          &amp;quot;range&amp;quot;: {
            &amp;quot;min …&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mike Thomsen</dc:creator><pubDate>Sun, 04 Nov 2018 00:00:00 -0400</pubDate><guid isPermaLink="false">tag:mikethomsen.github.io,2018-11-04:/posts/2018/11/04/nifi-data-generation-bundle-180-released/</guid><category>tutorial</category><category>nifi</category><category>data-engineering</category></item><item><title>Setting Up JanusGraph Locally (with HBase)</title><link>https://mikethomsen.github.io/posts/2018/10/15/setting-up-janusgraph-locally-with-hbase/</link><description>&lt;h1&gt;Setting Up JanusGraph Locally&lt;/h1&gt;
&lt;h2&gt;Setup HBase&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.apache.org/dyn/closer.lua/hbase/1.2.7/hbase-1.2.7-bin.tar.gz"&gt;Download HBase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tar -zxvf hbase-1.2.7-bin.tar.gz&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd hbase-1.2.7-bin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;./bin/hbase master&lt;/code&gt; (and wait about 5-12 seconds for it to finish starting)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Setup ElasticSearch&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;docker run --name es-janus -p 9200:9200 docker.elastic.co/elasticsearch/elasticsearch:6.4.2&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Setup …&lt;/h2&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mike Thomsen</dc:creator><pubDate>Mon, 15 Oct 2018 00:00:00 -0400</pubDate><guid isPermaLink="false">tag:mikethomsen.github.io,2018-10-15:/posts/2018/10/15/setting-up-janusgraph-locally-with-hbase/</guid><category>tutorial</category><category>nifi</category><category>graph</category><category>hadoop</category></item><item><title>Setting up Elasticsearch Document-Level Security</title><link>https://mikethomsen.github.io/posts/2018/10/11/setting-up-elasticsearch-document-level-security/</link><description>&lt;h2&gt;Docker Compose&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;version: &amp;quot;3&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;services:&lt;/span&gt;
&lt;span class="c"&gt;  elasticsearch:&lt;/span&gt;
&lt;span class="c"&gt;    image: docker.elastic.co/elasticsearch/elasticsearch:6.4.2&lt;/span&gt;
&lt;span class="c"&gt;    container_name: elasticsearch&lt;/span&gt;
&lt;span class="c"&gt;    ports:&lt;/span&gt;
&lt;span class="c"&gt;      - 9200:9200&lt;/span&gt;
&lt;span class="c"&gt;      - 9300:9300&lt;/span&gt;
&lt;span class="c"&gt;    environment:&lt;/span&gt;
&lt;span class="c"&gt;      - &amp;quot;discovery.type=single-node&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;      - &amp;quot;xpack.security.enabled=true&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;  kibana:&lt;/span&gt;
&lt;span class="c"&gt;    image: docker.elastic.co/kibana/kibana:6.4.2&lt;/span&gt;
&lt;span class="c"&gt;    container_name: kibana&lt;/span&gt;
&lt;span class="c"&gt;    environment:&lt;/span&gt;
&lt;span class="c"&gt;      - &amp;quot;elasticsearch.username=elastic&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;      - &amp;quot;elasticsearch.password=changeme&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;    ports …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mike Thomsen</dc:creator><pubDate>Thu, 11 Oct 2018 08:47:00 -0400</pubDate><guid isPermaLink="false">tag:mikethomsen.github.io,2018-10-11:/posts/2018/10/11/setting-up-elasticsearch-document-level-security/</guid><category>tutorial</category><category>elastic</category><category>nifi</category><category>security</category></item><item><title>Building PDFS with Apache Nifi</title><link>https://mikethomsen.github.io/posts/2018/05/10/building-pdfs-with-apache-nifi/</link><description>&lt;p&gt;I just released a new NiFi processor that provides the ability to generate a PDF from flowfile contents, attributes or both. It can be downloaded from &lt;a href="https://github.com/MikeThomsen/nifi-pdf-generator-bundle"&gt;here&lt;/a&gt;. For right now, it references NiFi 1.7.0-SNAPSHOT as a requirement, but I might bump that down to 1.6.0 or …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mike Thomsen</dc:creator><pubDate>Thu, 10 May 2018 00:00:00 -0400</pubDate><guid isPermaLink="false">tag:mikethomsen.github.io,2018-05-10:/posts/2018/05/10/building-pdfs-with-apache-nifi/</guid><category>tutorial</category><category>nifi</category><category>data-engineering</category></item><item><title>KSQL and Apache NiFi (Part I)</title><link>https://mikethomsen.github.io/posts/2018/05/07/ksql-and-apache-nifi-part-i/</link><description>&lt;h1&gt;KSQL and Apache NiFi (Part I)&lt;/h1&gt;
&lt;p&gt;If you haven't heard about KSQL, which is Confluent's new(ish) SQL engine built on top of Apache Kafka, check out some of these links:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.confluent.io/product/ksql/"&gt;KSQL Product Page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.confluent.io/blog/ksql-in-action-real-time-streaming-etl-from-oracle-transactional-data"&gt;KSQL in Action&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.confluent.io/current/ksql/docs/tutorials/basics-docker.html#ksql-quickstart-docker"&gt;Writing Streaming Queries against Kafka using KSQL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So let's say you want to …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mike Thomsen</dc:creator><pubDate>Mon, 07 May 2018 17:47:00 -0400</pubDate><guid isPermaLink="false">tag:mikethomsen.github.io,2018-05-07:/posts/2018/05/07/ksql-and-apache-nifi-part-i/</guid><category>misc</category><category>nifi</category><category>kafka</category><category>data-engineering</category></item><item><title>HBase Visibility Labels</title><link>https://mikethomsen.github.io/posts/2018/05/07/hbase-visibility-labels/</link><description>&lt;h1&gt;HBase Visibility Labels&lt;/h1&gt;
&lt;h3&gt;Basic Terms&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Visibility label - one or more tokens that may be combined with boolean logic to define restrictions on data access.&lt;/li&gt;
&lt;li&gt;Authorizations - one or more tokens that can be provided to HBase to evaluate against a visibility label.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Overview&lt;/h3&gt;
&lt;p&gt;Visibility labels are an expression that is stored …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mike Thomsen</dc:creator><pubDate>Mon, 07 May 2018 06:15:00 -0400</pubDate><guid isPermaLink="false">tag:mikethomsen.github.io,2018-05-07:/posts/2018/05/07/hbase-visibility-labels/</guid><category>tutorial</category><category>nifi</category><category>hadoop</category><category>security</category></item></channel></rss>