<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Mike Thomsen's Blog</title><link href="https://mikethomsen.github.io/" rel="alternate"></link><link href="https://mikethomsen.github.io/atom.xml" rel="self"></link><id>https://mikethomsen.github.io/</id><updated>2020-10-31T00:00:00-04:00</updated><entry><title>Querying a Gremlin-enabled graph database with NiFi</title><link href="https://mikethomsen.github.io/posts/2020/10/31/querying-a-gremlin-enabled-graph-database-with-nifi/" rel="alternate"></link><published>2020-10-31T00:00:00-04:00</published><updated>2020-10-31T00:00:00-04:00</updated><author><name>Mike Thomsen</name></author><id>tag:mikethomsen.github.io,2020-10-31:/posts/2020/10/31/querying-a-gremlin-enabled-graph-database-with-nifi/</id><summary type="html">&lt;p&gt;The graph bundle is not part of the standard NiFi convenience binaries, but it's available for download from Maven Central. To get started with it, grab the versions of the following NAR files that correspond to your version of NiFi:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://search.maven.org/search?q=a:nifi-graph-client-service-api-nar"&gt;nifi-graph-client-service-api-nar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://search.maven.org/search?q=a:nifi-graph-nar"&gt;nifi-graph-nar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://search.maven.org/search?q=a:nifi-other-graph-services-nar"&gt;nifi-other-graph-services-nar&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Put all three of them in either â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;The graph bundle is not part of the standard NiFi convenience binaries, but it's available for download from Maven Central. To get started with it, grab the versions of the following NAR files that correspond to your version of NiFi:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://search.maven.org/search?q=a:nifi-graph-client-service-api-nar"&gt;nifi-graph-client-service-api-nar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://search.maven.org/search?q=a:nifi-graph-nar"&gt;nifi-graph-nar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://search.maven.org/search?q=a:nifi-other-graph-services-nar"&gt;nifi-other-graph-services-nar&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Put all three of them in either &lt;code&gt;$NIFI/lib&lt;/code&gt; or &lt;code&gt;$NIFI/extensions&lt;/code&gt;. There's a dependency chain there, so it's probably best to put them in &lt;code&gt;lib&lt;/code&gt; and restart NiFi.&lt;/p&gt;
&lt;p&gt;The easiest Gremlin-enabled database that I know of is &lt;a href="http://janusgraph.org"&gt;JanusGraph&lt;/a&gt;, so here's how you get started with a really simple Docker image of that.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker run -p 8182:8182 --name test-janusgraph -d janusgraph/janusgraph:latest&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Give that a few seconds for JanusGraph to start up, and open a gremlin connection with the Gremlin client.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker exec -it test-janusgraph bin/gremlin.sh&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Once the Gremlin console is running, set up a remote connection like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;:remote connect tinkerpop.server conf/remote.yaml session
:remote console
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You should see output like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;         \,,,/
         (o o)
-----oOOo-(3)-oOOo-----
SLF4J: Class path contains multiple SLF4J bindings.
SLF4J: Found binding in [jar:file:/opt/janusgraph/lib/slf4j-log4j12-1.7.12.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: Found binding in [jar:file:/opt/janusgraph/lib/logback-classic-1.1.3.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J: Actual binding is of type [org.slf4j.impl.Log4jLoggerFactory]
plugin activated: tinkerpop.server
plugin activated: tinkerpop.tinkergraph
16:08:31 WARN  org.apache.hadoop.util.NativeCodeLoader  - Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
plugin activated: tinkerpop.hadoop
plugin activated: tinkerpop.spark
plugin activated: tinkerpop.utilities
plugin activated: janusgraph.imports
gremlin&amp;gt; 
gremlin&amp;gt; :remote connect tinkerpop.server conf/remote.yaml session
==&amp;gt;Configured localhost/127.0.0.1:8182-[2c00fea0-2621-4760-91d5-ac311bd853f0]
gremlin&amp;gt; :remote console
==&amp;gt;All scripts will now be sent to Gremlin Server - [localhost/127.0.0.1:8182]-[2c00fea0-2621-4760-91d5-ac311bd853f0] - type &amp;#39;:remote console&amp;#39; to return to local mode
gremlin&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now you can create a few fake users like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addV&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;person&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;fullName&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Jane Doe&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;age&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;as&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;jdoe&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addV&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;person&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;fullName&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;John Brown&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;age&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;as&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;jbrown&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addV&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;person&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;fullName&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Jack Smith&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;age&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;as&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;jsmith&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addE&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;workswith&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;jdoe&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;jbrown&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addE&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;workswith&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;jbrown&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;jdoe&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addE&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;manages&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;jsmith&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;jdoe&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addE&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;manages&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;jsmith&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;jbrown&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;next&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here is a copy and paste-friendly version of that:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addV&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;person&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;fullName&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Jane Doe&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;age&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;as&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;jdoe&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;addV&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;person&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;fullName&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;John Brown&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;age&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;as&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;jbrown&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;addV&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;person&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;fullName&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Jack Smith&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;age&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;as&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;jsmith&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;addE&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;workswith&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;jdoe&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;jbrown&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;addE&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;workswith&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;jbrown&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;jdoe&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;addE&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;manages&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;jsmith&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;jdoe&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;addE&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;manages&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;jsmith&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;jbrown&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;next&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now you can do a quick test to make sure everything looks good:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;gremlin&amp;gt; g.V().hasLabel(&amp;quot;person&amp;quot;).outE(&amp;quot;manages&amp;quot;).inV().valueMap().next();
==&amp;gt;{fullName=[Jane Doe], age=[30]}
==&amp;gt;{fullName=[John Brown], age=[45]}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The next step is to wire up a NiFi flow that looks like this. Take the query above and make it the value for the &lt;code&gt;GenerateFlowFile&lt;/code&gt; custom text. You should also set the run interval to something like 10 seconds.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Graph Flow" src="/img/2020/10/gremlin-query/flow.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Gremlin Driver Configuration" src="/img/2020/10/gremlin-query/configuration.png"&gt;&lt;/p&gt;
&lt;p&gt;And when you run that query, you should see results that look like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Query Results" src="/img/2020/10/gremlin-query/results.png"&gt;&lt;/p&gt;
&lt;p&gt;It's worth noting that Gremlin is not query language like SQL, but rather a DSL implemented in languages like Groovy. So there will be cases where you have to step around that and write some Groovy to wrap the query. For example, if you wanted to get all of the users, you would have to structure it like this to work within the serialization behavior of Gremlin Server:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;V&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;hasLabel&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;person&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;each&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;V&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;valueMap&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;next&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;results&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="tutorial"></category><category term="nifi"></category><category term="graph"></category><category term="gremlin"></category></entry><entry><title>The Retweet, a cautionary tale in feature design</title><link href="https://mikethomsen.github.io/posts/2020/10/30/the-retweet-a-cautionary-tale-in-feature-design/" rel="alternate"></link><published>2020-10-30T18:52:00-04:00</published><updated>2020-10-30T18:52:00-04:00</updated><author><name>Mike Thomsen</name></author><id>tag:mikethomsen.github.io,2020-10-30:/posts/2020/10/30/the-retweet-a-cautionary-tale-in-feature-design/</id><summary type="html">&lt;p&gt;In a quick &lt;a href="https://www.linkedin.com/posts/mike-thomsen-780341191_the-retweet-is-an-unsung-example-of-an-idea-activity-6727366455811166208-G801"&gt;post on LinkedIn&lt;/a&gt;, I singled out the Retweet as a great example of a much-loved feature that has turned out to be an unmitigated disaster for not just Twitter, but all of its peers. It's worth expanding on those points because it's a fascinating case in the â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;In a quick &lt;a href="https://www.linkedin.com/posts/mike-thomsen-780341191_the-retweet-is-an-unsung-example-of-an-idea-activity-6727366455811166208-G801"&gt;post on LinkedIn&lt;/a&gt;, I singled out the Retweet as a great example of a much-loved feature that has turned out to be an unmitigated disaster for not just Twitter, but all of its peers. It's worth expanding on those points because it's a fascinating case in the intersection of how the Law of Unintentational Consequences and software engineering can have truly horrific results.&lt;/p&gt;
&lt;p&gt;The approximate origins of the Retweet feature come from users whining about the extra steps involved in sharing someone else's posts. The herculean task of copying and pasting was too much for many users, so Twitter obliged them and automated that small amount of manual labor for them.&lt;/p&gt;
&lt;p&gt;Unlike a quote feature, the Retweet allows you to just spam the heck out of your followers on Twitter. Though admittedly, unlike traditional spam, it's often sufficiently aligned with the tastes of the followers that it is more often welcomed than not.&lt;/p&gt;
&lt;p&gt;What makes the feature so dangerous is that it reproduces data &lt;strong&gt;very&lt;/strong&gt; rapidly. For Twitter and its less sophisticated rivals, too rapidly in many cases. Once a few influencers, taste-makers, etc. get ahold of something, the growth rate is probably exponential. The practical effect is if the wrong tweet gets the meat machinery of Twitter (and its competitors) going, it also increases the exposure to bad takes exponentially.&lt;/p&gt;
&lt;p&gt;Now at this point, it shouldn't take a genius to realize the potential for causing chaos. Literally every negative aspect of Twitter and its peers gets amplified by this feature and its equivalents. A lot of people cannot grasp the hard truth that the features that let them have a chance of making something go viral work just as effectively in the hands of a foreign intelligence service trying to spread disinformation. The problem isn't the abuse, the problem is that the feature is an intrinsically attractive target for abuse no measure what counter-measures are put in place.&lt;/p&gt;
&lt;p&gt;That brings us to another hard truth about this feature, which is that it mixes poorly with the average person's weak ability to tell random data points shoved in their face from a trend of such things happening generally. A lot of social outrage on social media is precisely this. One random bad act spins out of control today. Tomorrow another one gets spun up. People conclude from this retweet spam "it's a trend!" except it really isn't. It's random data points spun out of control and shoved into your face by an algorithm.&lt;/p&gt;
&lt;p&gt;Much of the societal damage people see and struggle to describe comes from the ease with which social media feeds our darker impulses. One of those is the addicting nature of anger and outrage, especially as they feed off of self-righteousness and virtue-signaling. This not a new phenomenon; literally a good portion of all four gospels in the New Testament is devoted to Jesus doing rhetoric Judo on some self-righteous virtue-signaler. What is new is how modern technology has fed this tendency.&lt;/p&gt;
&lt;p&gt;As software engineers, it's unlikely that any of us will ever contemplate a feature like this, mutter "what could go wrong?" and then look back 10 years later staring at societal scar tissue we caused. It is still a valuable lesson on why we shouldn't hesitate to expand on "what could go wrong" by saying "no, seriously, let's look at all of the ways this could be misued by our worst users."&lt;/p&gt;</content><category term="opinion"></category><category term="social-media"></category></entry><entry><title>Creating date-based Elasticsearch indexes with Apache Nifi</title><link href="https://mikethomsen.github.io/posts/2020/10/26/creating-date-based-elasticsearch-indexes-with-apache-nifi/" rel="alternate"></link><published>2020-10-26T00:00:00-04:00</published><updated>2020-10-26T00:00:00-04:00</updated><author><name>Mike Thomsen</name></author><id>tag:mikethomsen.github.io,2020-10-26:/posts/2020/10/26/creating-date-based-elasticsearch-indexes-with-apache-nifi/</id><summary type="html">&lt;p&gt;One of the many cool features of Elasticsearch is that it is able to use a feature called &lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/index-templates.html"&gt;Index Templates&lt;/a&gt; to create new indexes on the fly when you POST data to indexes that match a particular defined pattern. One of the reasons you'd want to do this sort of â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;One of the many cool features of Elasticsearch is that it is able to use a feature called &lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/index-templates.html"&gt;Index Templates&lt;/a&gt; to create new indexes on the fly when you POST data to indexes that match a particular defined pattern. One of the reasons you'd want to do this sort of setup is that you can target data range queries more accurately. For example, if you know a document might be between the last week of one month and the first week of another, you can specify the two indexes that would satisfy it instead of one big index that would take longer to search.&lt;/p&gt;
&lt;p&gt;The following is an example of an index template for a simple message system:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;PUT _template/messages
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;index_patterns&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;messages_*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;template&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;settings&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;number_of_replicas&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;number_of_shards&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;mappings&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;quot;from&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;keyword&amp;quot;&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;quot;to&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;keyword&amp;quot;&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;quot;sent_on&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;date&amp;quot;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now you are ready to create new message indexes such as &lt;code&gt;message_2020-10&lt;/code&gt; that correspond to the months in which your messages arrived. The next step is to create an Avro schema for these messages:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;record&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;MessageRecord&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;fields&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;from&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;to&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;sent_on&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So now you have a record schema that can take a JSON object like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;from&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;john.doe&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;to&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;jane.doe&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello, world&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;sent_on&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2020-10-27 10:15:00&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The reason why I chose to use a string instead of an avro logical type of &lt;code&gt;timestamp-millis&lt;/code&gt; or &lt;code&gt;date&lt;/code&gt; is because it makes mangling the date string easier. Originally, I tried to use &lt;code&gt;QueryRecord&lt;/code&gt;, but that uses Apache Calcite and Calcite currently doesn't support date/timestap formatting functionality. So a string field is the path of least resistence here.&lt;/p&gt;
&lt;p&gt;The flow for all of this is pretty simple. It consists of a few operations:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;GetFile&lt;/code&gt; to retrieve files from &lt;code&gt;/tmp/input&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UpdateAttribute&lt;/code&gt; to add &lt;code&gt;schema.name&lt;/code&gt; and set it to &lt;code&gt;message&lt;/code&gt;, which is the name of the schema in the &lt;code&gt;AvroSchemaRegistry&lt;/code&gt; that is used by the &lt;code&gt;JsonTreeReader&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PartitionRecord&lt;/code&gt; partitions on &lt;code&gt;sent_on&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PutElasticsearchRecord&lt;/code&gt; which reads the partition data and posts the data to Elasticsearch.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="Flow" src="/img/2020/10/partition-elasticsearch/flow.png"&gt;&lt;/p&gt;
&lt;p&gt;This is the configuration for &lt;code&gt;PartitionRecord&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="PartitionRecord Configuration" src="/img/2020/10/partition-elasticsearch/partition_record.png"&gt;&lt;/p&gt;
&lt;p&gt;This is the configuration for &lt;code&gt;PutElasticsearchRecord&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="PutElasticsearchRecord Configuration" src="/img/2020/10/partition-elasticsearch/PutElasticsearchRecord.png"&gt;&lt;/p&gt;
&lt;p&gt;Now to generate some test data:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;faker&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Faker&lt;/span&gt;

&lt;span class="n"&gt;faker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Faker&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;usernames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;messages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;usernames&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;faker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user_name&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100000&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;year&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2020&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;month&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zfill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;day&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zfill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="n"&gt;ts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; 10:00:00&amp;quot;&lt;/span&gt;

  &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;usernames&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;usernames&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;usernames&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;from&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;to&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;sent_on&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;faker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;messages&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/tmp/input/messages.json&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;indent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sort_keys&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The entire flow can be downloaded as a NiFi template &lt;a href="/artifacts/nifi/templates/Partition_Elastic.xml"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For anyone who needs help with testing out Elasticsearch, the following Docker Compose configuration was used for testing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;3&amp;quot;&lt;/span&gt;
&lt;span class="nt"&gt;services&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;elasticsearch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;docker.elastic.co/elasticsearch/elasticsearch:7.9.0&lt;/span&gt;
    &lt;span class="nt"&gt;container_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;elasticsearch&lt;/span&gt;
    &lt;span class="nt"&gt;hostname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;elasticsearch&lt;/span&gt;
    &lt;span class="nt"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;discovery.type=single-node&amp;quot;&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ELASTICSEARCH_USERNAME=elastic&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ELASTICSEARCH_PASSWORD=elastic&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;xpack.security.enabled=false&lt;/span&gt;
    &lt;span class="nt"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;9200:9200&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;9300:9300&lt;/span&gt;
  &lt;span class="nt"&gt;kibana&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;docker.elastic.co/kibana/kibana:7.9.0&lt;/span&gt;
    &lt;span class="nt"&gt;container_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;kibana&lt;/span&gt;
    &lt;span class="nt"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ELASTICSEARCH_URL=&amp;quot;http://elasticsearch:9200&amp;quot;&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ELASTICSEARCH_USERNAME=elastic&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ELASTICSEARCH_PASSWORD=elastic&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;xpack.security.enabled=false&lt;/span&gt;
    &lt;span class="nt"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;5601:5601&lt;/span&gt;
    &lt;span class="nt"&gt;links&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;elasticsearch&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="tutorial"></category><category term="elasticsearch"></category><category term="nifi"></category></entry><entry><title>Getting NiFi optional features with Maven</title><link href="https://mikethomsen.github.io/posts/2020/10/20/getting-nifi-optional-features-with-maven/" rel="alternate"></link><published>2020-10-20T11:01:00-04:00</published><updated>2020-10-20T11:01:00-04:00</updated><author><name>Mike Thomsen</name></author><id>tag:mikethomsen.github.io,2020-10-20:/posts/2020/10/20/getting-nifi-optional-features-with-maven/</id><summary type="html">&lt;p&gt;The binaries that are available for download on the &lt;a href="http://nifi.apache.org"&gt;NiFi website&lt;/a&gt; only contain the most essential NAR files because the whole NiFi build is simply too large for many of our mirrors. Fortunately, you have multiple ways to get access to these binaries. You can download them from the &lt;a href="http://search.maven.org"&gt;Maven â€¦&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;The binaries that are available for download on the &lt;a href="http://nifi.apache.org"&gt;NiFi website&lt;/a&gt; only contain the most essential NAR files because the whole NiFi build is simply too large for many of our mirrors. Fortunately, you have multiple ways to get access to these binaries. You can download them from the &lt;a href="http://search.maven.org"&gt;Maven Central Repository Search&lt;/a&gt; manually, with a script or Maven project or you can build the whole project yourself.&lt;/p&gt;
&lt;p&gt;As of 1.12.1, the optional features not included are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kafka 0.8 support&lt;/li&gt;
&lt;li&gt;Kafka 0.9 support&lt;/li&gt;
&lt;li&gt;The Elasticsearch 5 Transport API bundle (with good reason, the transport API was deprecated as a public client API!)&lt;/li&gt;
&lt;li&gt;The Graph Database Bundle&lt;/li&gt;
&lt;li&gt;The Rules Engine Bundle&lt;/li&gt;
&lt;li&gt;Hive 1 support&lt;/li&gt;
&lt;li&gt;Hive 3 support&lt;/li&gt;
&lt;li&gt;Apache Atlas Support&lt;/li&gt;
&lt;li&gt;Apache Accumulo Support&lt;/li&gt;
&lt;li&gt;SQL Reporting Bundle&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For automated builds, the Maven artifacts are cleanly listed in &lt;a href="https://github.com/apache/nifi/blob/b442df58e2f1270589b25ab5575101bf2f9860f3/nifi-assembly/pom.xml#L776"&gt;nifi-assembly/pom&lt;/a&gt;. The following is an example of a Maven POM that you can run to fetch the Graph Database Bundle (under the section &lt;code&gt;include-graph&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;project&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://maven.apache.org/POM/4.0.0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;xmlns:xsi=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;modelVersion&amp;gt;&lt;/span&gt;4.0.0&lt;span class="nt"&gt;&amp;lt;/modelVersion&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.nifi&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;nifi-contrib-assembly&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.0.0-SNAPSHOT&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;NiFi Contrib Assembly&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;packaging&amp;gt;&lt;/span&gt;pom&lt;span class="nt"&gt;&amp;lt;/packaging&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;description&amp;gt;&lt;/span&gt;Provides a bundle for all of the NiFi optional NARs&lt;span class="nt"&gt;&amp;lt;/description&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;properties&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;nifi.version&amp;gt;&lt;/span&gt;1.12.1&lt;span class="nt"&gt;&amp;lt;/nifi.version&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/properties&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.nifi&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;nifi-graph-client-service-api-nar&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;${nifi.version}&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;type&amp;gt;&lt;/span&gt;nar&lt;span class="nt"&gt;&amp;lt;/type&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.nifi&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;nifi-neo4j-cypher-service-nar&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;${nifi.version}&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;type&amp;gt;&lt;/span&gt;nar&lt;span class="nt"&gt;&amp;lt;/type&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.nifi&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;nifi-graph-nar&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;${nifi.version}&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;type&amp;gt;&lt;/span&gt;nar&lt;span class="nt"&gt;&amp;lt;/type&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.nifi&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;nifi-other-graph-services-nar&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;${nifi.version}&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;type&amp;gt;&lt;/span&gt;nar&lt;span class="nt"&gt;&amp;lt;/type&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;maven-dependency-plugin&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;excludeTransitive&amp;gt;&lt;/span&gt;true&lt;span class="nt"&gt;&amp;lt;/excludeTransitive&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;executions&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;execution&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;phase&amp;gt;&lt;/span&gt;package&lt;span class="nt"&gt;&amp;lt;/phase&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;goals&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;goal&amp;gt;&lt;/span&gt;copy-dependencies&lt;span class="nt"&gt;&amp;lt;/goal&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/goals&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;outputDirectory&amp;gt;&lt;/span&gt;${project.build.directory}/lib&lt;span class="nt"&gt;&amp;lt;/outputDirectory&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/execution&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/executions&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;maven-assembly-plugin&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;3.1.1&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;descriptors&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;descriptor&amp;gt;&lt;/span&gt;src/main/assembly/assembly.xml&lt;span class="nt"&gt;&amp;lt;/descriptor&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/descriptors&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;finalName&amp;gt;&lt;/span&gt;nifi-contrib-nars&lt;span class="nt"&gt;&amp;lt;/finalName&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;executions&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;execution&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;id&amp;gt;&lt;/span&gt;make-assembly&lt;span class="nt"&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
            &lt;span class="c"&gt;&amp;lt;!-- this is used for inheritance merges --&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;phase&amp;gt;&lt;/span&gt;package&lt;span class="nt"&gt;&amp;lt;/phase&amp;gt;&lt;/span&gt;
            &lt;span class="c"&gt;&amp;lt;!-- bind to the packaging phase --&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;goals&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;goal&amp;gt;&lt;/span&gt;single&lt;span class="nt"&gt;&amp;lt;/goal&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/goals&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/execution&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/executions&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With this assembly configuration:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;assembly&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.2&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;xmlns:xsi=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.2 http://maven.apache.org/xsd/assembly-1.1.2.xsd&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;id&amp;gt;&lt;/span&gt;assembly&lt;span class="nt"&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;baseDirectory&amp;gt;&lt;/span&gt;/&lt;span class="nt"&gt;&amp;lt;/baseDirectory&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;formats&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;format&amp;gt;&lt;/span&gt;zip&lt;span class="nt"&gt;&amp;lt;/format&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/formats&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;fileSets&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;fileSet&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;directory&amp;gt;&lt;/span&gt;${basedir}/target/lib&lt;span class="nt"&gt;&amp;lt;/directory&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;outputDirectory&amp;gt;&lt;/span&gt;./&lt;span class="nt"&gt;&amp;lt;/outputDirectory&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;includes&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;include&amp;gt;&lt;/span&gt;**&lt;span class="nt"&gt;&amp;lt;/include&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/includes&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/fileSet&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/fileSets&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/assembly&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A working version of this as a ready-made git repository can be &lt;a href="https://github.com/MikeThomsen/nifi-contrib-assembly/tags"&gt;downloaded here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And if you want to build a custom NiFi Docker image that brings in these NARS, it's this easy:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="s"&gt;maven:3&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="s"&gt;build&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt; pom.xml /tmp/pom.xml

&lt;span class="k"&gt;RUN&lt;/span&gt; mvn -f /tmp/pom.xml dependency:resolve

&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="s"&gt;apache/nifi:1.12.1&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt; --from&lt;span class="o"&gt;=&lt;/span&gt;build --chown&lt;span class="o"&gt;=&lt;/span&gt;nifi /root/.m2/repository/org/apache/nifi/nifi-graph-client-service-api-nar/1.12.1/nifi-graph-client-service-api-nar-1.12.1.nar /opt/nifi/nifi-current/lib/nifi-graph-client-service-api-nar-1.12.1.nar
&lt;span class="k"&gt;COPY&lt;/span&gt; --from&lt;span class="o"&gt;=&lt;/span&gt;build --chown&lt;span class="o"&gt;=&lt;/span&gt;nifi /root/.m2/repository/org/apache/nifi/nifi-neo4j-cypher-service-nar/1.12.1/nifi-neo4j-cypher-service-nar-1.12.1.nar /opt/nifi/nifi-current/lib/nifi-neo4j-cypher-service-nar-1.12.1.nar
&lt;span class="k"&gt;COPY&lt;/span&gt; --from&lt;span class="o"&gt;=&lt;/span&gt;build --chown&lt;span class="o"&gt;=&lt;/span&gt;nifi /root/.m2/repository/org/apache/nifi/nifi-graph-nar/1.12.1/nifi-graph-nar-1.12.1.nar /opt/nifi/nifi-current/lib/nifi-graph-nar-1.12.1.nar
&lt;span class="k"&gt;COPY&lt;/span&gt; --from&lt;span class="o"&gt;=&lt;/span&gt;build --chown&lt;span class="o"&gt;=&lt;/span&gt;nifi /root/.m2/repository/org/apache/nifi/nifi-other-graph-services-nar/1.12.1/nifi-other-graph-services-nar-1.12.1.nar /opt/nifi/nifi-current/lib/nifi-other-graph-services-nar-1.12.1.nar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="tutorial"></category><category term="nifi"></category><category term="graph"></category></entry><entry><title>"Data Engineering Recipe: Normalizing different input files with minimal code"</title><link href="https://mikethomsen.github.io/posts/2019/09/13/data-engineering-recipe-normalizing-different-input-files-with-minimal-code/" rel="alternate"></link><published>2019-09-13T08:50:00-04:00</published><updated>2019-09-13T08:50:00-04:00</updated><author><name>Mike Thomsen</name></author><id>tag:mikethomsen.github.io,2019-09-13:/posts/2019/09/13/data-engineering-recipe-normalizing-different-input-files-with-minimal-code/</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;Scenario: you get CSV files that relate to the same problem domain, but they have different headers.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;One of the problems that we've faced in the past where I work is that our clients can get data that falls in the same problem domain from different sources, but they need â€¦&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;Scenario: you get CSV files that relate to the same problem domain, but they have different headers.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;One of the problems that we've faced in the past where I work is that our clients can get data that falls in the same problem domain from different sources, but they need to normalize it into a common format. It's fairly common problem, so the purpose of this post is to explain some easy strategies that will keep you from slinging too much Groovy or Python in favor of leveraging the features that NiFi has (partly due to the awesome capabilities of Apache Avro) to do a lot of the work for you.&lt;/p&gt;
&lt;p&gt;The NiFi Record API, fundamentally, is built on Apache Avro. The structure and capabilities it has are built on and extensions to what Apache Avro gives you out of the box. One of those features is the ability to define one or more aliases for a field name. Now, aliases are one-way, which is really helpful when you're using NiFi to do ETL tasks like normalizing data. Wrong header comes in, the right field name/header goes out. It also doesn't care if you give one field one alias or several hundred. The only real restriction is that you cannot have aliases and field names colliding. That means that field names must be unique amongst each other and there cannot be any overlap between aliases that one have one alias resolving to two or more fields.&lt;/p&gt;
&lt;p&gt;Consider these CSV files:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;fname,lname,failed_logins
John,Smith,2
Jane,Doe,1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;first_name,last_name,failed_login_attempts
John,Brown,3
Jane,Smith,2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is the only Avro needed to resolve that into a single input:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;UserRecord&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;record&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;fields&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;firstName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;aliases&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;fname&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;first_name&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;lastName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;aliases&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;lname&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;last_name&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;failedLoginCount&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;int&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;aliases&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;failed_logins&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;failed_login_attempts&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If your data sources are following good practices like not putting multi-line headers (ex. top row is meant to categorize the real headers below it) and not repeating header names, you can almost always stop at that point. If not, you might have to write some Groovy code for &lt;code&gt;ExecuteScript&lt;/code&gt; to peek at the CSV file and inspect the top few lines with a Java &lt;code&gt;Scanner&lt;/code&gt; object to see what you're getting. Event that is not that difficult. For example, this is one way to handle repeated headers if they're repeated consistently (never underestimate the ability of people to get things like this amazingly inconsistent).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;read&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;flowFile&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;scanner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Scanner&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;is&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;topThree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;scanner&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nextLine&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
    &lt;span class="n"&gt;scanner&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nextLine&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
    &lt;span class="n"&gt;scanner&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nextLine&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;correctHeader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
&lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;savedLines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;topThree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;each&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;correctHeader&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;savedLines&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;?.&lt;/span&gt;&lt;span class="na"&gt;with&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;parts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;split&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;find&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;SOME_HEADER_FIELD&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;//Found likely header line&lt;/span&gt;
            &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;duplicates&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[]&lt;/span&gt;
            &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;headerLine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;
            &lt;span class="n"&gt;parts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;each&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;part&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;findAll&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;part&lt;/span&gt; &lt;span class="o"&gt;}.&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;duplicates&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;part&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;duplicates&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;handledDuplicates&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[:]&lt;/span&gt;
                &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;newHeaderTokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[]&lt;/span&gt;
                &lt;span class="n"&gt;parts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;each&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;part&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
                    &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;newToken&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;part&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;part&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;duplicates&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!(&lt;/span&gt;&lt;span class="n"&gt;part&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;handledDuplicates&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;keySet&lt;/span&gt;&lt;span class="o"&gt;()))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;handledDuplicates&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;part&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
                    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;part&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;duplicates&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;part&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;handledDuplicates&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;keySet&lt;/span&gt;&lt;span class="o"&gt;()))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;newToken&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;${part}_${handledDuplicates[part]}&amp;quot;&lt;/span&gt;
                        &lt;span class="n"&gt;handledDuplicates&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;part&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;handledDuplicates&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;part&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                    &lt;span class="o"&gt;}&lt;/span&gt;

                    &lt;span class="n"&gt;newHeaderTokens&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;newToken&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;
                &lt;span class="n"&gt;headerLine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;newHeaderTokens&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;join&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;

            &lt;span class="n"&gt;correctHeader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;headerLine&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scanner&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hasNextLine&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;savedLines&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;scanner&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nextLine&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;//Finish processing&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="tutorial"></category><category term="nifi"></category><category term="data-engineering"></category></entry><entry><title>Containerizing NiFi ETL processes</title><link href="https://mikethomsen.github.io/posts/2019/08/16/containerizing-nifi-etl-processes/" rel="alternate"></link><published>2019-08-16T00:00:00-04:00</published><updated>2019-08-16T00:00:00-04:00</updated><author><name>Mike Thomsen</name></author><id>tag:mikethomsen.github.io,2019-08-16:/posts/2019/08/16/containerizing-nifi-etl-processes/</id><summary type="html">&lt;h2&gt;Disclaimer&lt;/h2&gt;
&lt;p&gt;The preferred approach to managing NiFi in most cases is through the &lt;a href="https://nifi.apache.org/registry.html"&gt;NiFi Registry&lt;/a&gt;. It's an awesome tool that puts a lot of really powerful change management tools into your hands for developing, snapshotting and promoting flows between environments. The purpose of this blog post isn't to recommend an â€¦&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Disclaimer&lt;/h2&gt;
&lt;p&gt;The preferred approach to managing NiFi in most cases is through the &lt;a href="https://nifi.apache.org/registry.html"&gt;NiFi Registry&lt;/a&gt;. It's an awesome tool that puts a lot of really powerful change management tools into your hands for developing, snapshotting and promoting flows between environments. The purpose of this blog post isn't to recommend an official alternative to that, but to give you an idea of how you can directly containerize a flow for when that makes sense (which is probably a lot rarer than the official, preferred approach to managing NiFi flows!)&lt;/p&gt;
&lt;h2&gt;Now then...&lt;/h2&gt;
&lt;p&gt;When you build a NiFi flow, it gets stored in a file called &lt;code&gt;flow.xml.gz&lt;/code&gt;. Think of that file as the main storage area for the state of what you see on the canvas. While there is an in-memory representation, &lt;code&gt;flow.xml.gz&lt;/code&gt; is the official backup that allows you to start back up after a restart. This is the first file that you need to backup and copy over to a container if you want a dockerized NiFi to be able to pick up the exact state of your flow and go without any configuration on your part.&lt;/p&gt;
&lt;p&gt;Any custom NAR files, Python scripts, etc. will need to be factored in. The following is an example project structure that a DevOps team could use to manage this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$PROJECT_ROOT&lt;/li&gt;
&lt;li&gt;Dockerfile&lt;/li&gt;
&lt;li&gt;flow.xml.gz&lt;/li&gt;
&lt;li&gt;custom-nar-1.0.0.nar&lt;/li&gt;
&lt;li&gt;our-python-package.tar.gz&lt;/li&gt;
&lt;li&gt;build.sh&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;code&gt;Dockerfile&lt;/code&gt; would look something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;FROM apache/nifi:1.9.2

COPY flow.xml.gz /opt/nifi/nifi-&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;NIFI_VERSION&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/conf
COPY custom-nar-1.0.0.nar /opt/nifi/nifi-&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;NIFI_VERSION&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/lib
COPY our-python-package.tar.gz /tmp/our-python-package.tar.gz
RUN pip install /tmp/our-python-package.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then that can be built using the command &lt;code&gt;docker build -t ourcompany/nifi:flow_name_here-1.0 .&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;As I said, there aren't many situations where this approach is better than the NiFi Registry. However, there are a few areas where it can be a lot better and more efficient:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Quickly rebuilding a shared development environment.&lt;/li&gt;
&lt;li&gt;Working with closed networks in production where synchronizing with a development and integration version of the NiFi Registry is impossible for security reasons.&lt;/li&gt;
&lt;li&gt;Demos and simulating another environment.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The third one can be a very interesting use of NiFi. I spent a few months on a project that used NiFi to generate a large volume of test data and pipe it out to different queues and outputs ranging from Kafka, to pushing it out over raw sockets (don't ask). The custom bundle we created on that project was the inspiration for &lt;a href="https://github.com/MikeThomsen/nifi-datageneration-bundle"&gt;my data generation bundle&lt;/a&gt;.&lt;/p&gt;</content><category term="tutorial"></category><category term="nifi"></category><category term="containers"></category><category term="docker"></category></entry><entry><title>Making NiFi components searchable</title><link href="https://mikethomsen.github.io/posts/2019/06/27/making-nifi-components-searchable/" rel="alternate"></link><published>2019-06-27T00:00:00-04:00</published><updated>2019-06-27T00:00:00-04:00</updated><author><name>Mike Thomsen</name></author><id>tag:mikethomsen.github.io,2019-06-27:/posts/2019/06/27/making-nifi-components-searchable/</id><summary type="html">&lt;p&gt;If you have a NiFi component that you work on for your business/team, you can make it searchable using the &lt;code&gt;Searchable&lt;/code&gt; interface. The following code sample is taken from &lt;a href="https://issues.apache.org/jira/browse/NIFI-4406"&gt;NIFI-4406&lt;/a&gt;, which makes &lt;code&gt;ExecuteScript&lt;/code&gt; searchable so that you can search for words inside of either the script body property or â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you have a NiFi component that you work on for your business/team, you can make it searchable using the &lt;code&gt;Searchable&lt;/code&gt; interface. The following code sample is taken from &lt;a href="https://issues.apache.org/jira/browse/NIFI-4406"&gt;NIFI-4406&lt;/a&gt;, which makes &lt;code&gt;ExecuteScript&lt;/code&gt; searchable so that you can search for words inside of either the script body property or by loading the contents of the script file and searching that.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.apache.nifi.search.Searchable&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Collection&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;SearchResult&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SearchContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Collection&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;SearchResult&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;term&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSearchTerm&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;scriptFile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ScriptingComponentUtils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;SCRIPT_FILE&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="na"&gt;evaluateAttributeExpressions&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getValue&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ScriptingComponentUtils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;SCRIPT_BODY&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="na"&gt;getValue&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;StringUtils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isBlank&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;script&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;IOUtils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;FileInputStream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scriptFile&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Could not read from path %s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scriptFile&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;Scanner&lt;/span&gt; &lt;span class="n"&gt;scanner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Scanner&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scanner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hasNextLine&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scanner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nextLine&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;StringUtils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;containsIgnoreCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;term&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Matched script at line %d: %s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;SearchResult&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Builder&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="na"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;term&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The pattern is pretty simple:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Figure out what should be searched within the component.&lt;/li&gt;
&lt;li&gt;Build a collection of &lt;code&gt;SearchResult&lt;/code&gt; objects if there are hits.&lt;/li&gt;
&lt;li&gt;Return an empty collection if there are not hits.&lt;/li&gt;
&lt;/ol&gt;</content><category term="tutorial"></category><category term="nifi"></category></entry><entry><title>Announcing the Apache NiFi Test Harness</title><link href="https://mikethomsen.github.io/posts/2019/03/20/announcing-the-apache-nifi-test-harness/" rel="alternate"></link><published>2019-03-20T00:00:00-04:00</published><updated>2019-03-20T00:00:00-04:00</updated><author><name>Mike Thomsen</name></author><id>tag:mikethomsen.github.io,2019-03-20:/posts/2019/03/20/announcing-the-apache-nifi-test-harness/</id><summary type="html">&lt;p&gt;&lt;a href="https://github.com/peter-gergely-horvath/"&gt;Peter Horvath&lt;/a&gt; provided us with a great new feature pull request that adds a test harness for running a live NiFi instance within a JUnit integration test. For now, the feature is only officially included in the unreleased 1.10.0-SNAPSHOT code on GitHub, but I put out a stable â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://github.com/peter-gergely-horvath/"&gt;Peter Horvath&lt;/a&gt; provided us with a great new feature pull request that adds a test harness for running a live NiFi instance within a JUnit integration test. For now, the feature is only officially included in the unreleased 1.10.0-SNAPSHOT code on GitHub, but I put out a stable build as a separate project that targets NiFi 1.8.0 &lt;a href="https://github.com/MikeThomsen/nifi-testharness"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Right now, it is still a MVP/experimental API so some tweaking and experimentation in building integration tests around it will be necessary. That said, this is a code sample of what it looks like in use:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;NiFiMockFlowTest&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;final&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;InputStream&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;DEMO_DATA_AS_STREAM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;NiFiMockFlowTest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getResourceAsStream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;/sample_technology_rss.xml&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MockedGetHTTP&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;extends&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;GetHTTPMock&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MockedGetHTTP&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;text/xml; charset=utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;DEMO_DATA_AS_STREAM&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;final&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SimpleNiFiFlowDefinitionEditor&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CONFIGURE_MOCKS_IN_NIFI_FLOW&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SimpleNiFiFlowDefinitionEditor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;updateFlowFileBuiltInNiFiProcessorVersionsToNiFiVersion&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setClassOfSingleProcessor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;GetHTTP&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MockedGetHTTP&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TestNiFiInstance&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;testNiFiInstance&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;@Before&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bootstrapNiFi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;throws&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Exception&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Constants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OUTPUT_DIR&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="ow"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;FileUtils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deleteDirectoryRecursive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Constants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OUTPUT_DIR&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toPath&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;File&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;nifiZipFile&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TestUtils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getBinaryDistributionZipFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Constants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NIFI_ZIP_DIR&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;TestNiFiInstance&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;testNiFi&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TestNiFiInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setNiFiBinaryDistributionZip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nifiZipFile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setFlowXmlToInstallForTesting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Constants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FLOW_XML_FILE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modifyFlowXmlBeforeInstalling&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CONFIGURE_MOCKS_IN_NIFI_FLOW&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;testNiFi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;testNiFi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;testNiFiInstance&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;testNiFi&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;@Test&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;testFlowCreatesFilesInCorrectLocation&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;throws&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;IOException&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;assertTrue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;Output directory not found: &amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Constants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OUTPUT_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Constants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OUTPUT_DIR&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="ow"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;File&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;outputFile&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;File&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Constants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OUTPUT_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;bbc-world.rss.xml&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;assertTrue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;Output file not found: &amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;outputFile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;outputFile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="ow"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;strings&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readAllLines&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outputFile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toPath&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;boolean&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;atLeastOneLineContainsNiFi&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;strings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;anyMatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="k"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;nifi&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;assertTrue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;There was no line containing NiFi&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;atLeastOneLineContainsNiFi&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;boolean&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;atLeastOneLineContainsNiFiVersion&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;strings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;anyMatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="k"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;latest nifi version&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;assertTrue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;There was no line containing &amp;#39;latest NiFi version&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;atLeastOneLineContainsNiFiVersion&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;@After&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;shutdownNiFi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;testNiFiInstance&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;testNiFiInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stopAndCleanup&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="tutorial"></category><category term="nifi"></category></entry><entry><title>A data engineering perspective on MongoDB</title><link href="https://mikethomsen.github.io/posts/2019/02/24/a-data-engineering-perspective-on-mongodb/" rel="alternate"></link><published>2019-02-24T00:00:00-05:00</published><updated>2019-02-24T00:00:00-05:00</updated><author><name>Mike Thomsen</name></author><id>tag:mikethomsen.github.io,2019-02-24:/posts/2019/02/24/a-data-engineering-perspective-on-mongodb/</id><summary type="html">&lt;p&gt;I came late to the game with MongoDB, having my first real professional experience with it in 2017 and doing a lot of work with refactoring the Apache NiFi support for it in 2017 through 2018. Over the years, I had seen lots of people attacking it and telling me â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;I came late to the game with MongoDB, having my first real professional experience with it in 2017 and doing a lot of work with refactoring the Apache NiFi support for it in 2017 through 2018. Over the years, I had seen lots of people attacking it and telling me why you should never use it under any circumstances. We all know that &lt;a href="https://www.youtube.com/watch?v=b2F-DItXtZs"&gt;it's webscale&lt;/a&gt; and &lt;a href="https://tech.wayfair.com/2013/04/devnull-vs-mongodb-benchmark-bake-off/"&gt;scales almost as well&lt;/a&gt; as a properly sharded and replicated &lt;code&gt;/dev/null&lt;/code&gt;, but is it really that bad? Not at all.&lt;/p&gt;
&lt;p&gt;MongoDB is a victim of its own marketing materials and success. While Mongo does have some concept of schema validation, at no point do they encourage users to start thinking about it as Agile necessitates refactoring and pivoting on their application--much less when they go to integration testing or production. This effectively means that where a lot of NoSQL data stores are schema-on-read or schema-on-write, MongoDB really doesn't have a schema at all. If some malevolent jerk on your team decides to seed a collection with a Date in the &lt;code&gt;phoneNumber&lt;/code&gt; field, MongoDB will happily accept that even if everything prior was a string or complex object.&lt;/p&gt;
&lt;p&gt;Yet here I'm not willing to give the SQL camp credit for the observation that Mongo users either have a formal schema or a de facto schema because there is a third option: simply chaos. In the case of Mongo, virtually any change is valid to the database when it is used this way. That means there isn't a de facto one unless you mean one in the sense of an abstract metaphysical, objective representation of the current state of the system that might not actually exist fully in the head of any one member of the team. One example of this is that I have seen dates in a single collection represented as long integers, Date objects, and probably about half a dozen distinctly different string representation (and half of them weren't a flavor of ISO8601 either). Just think about trying to query on that and explaining to MongoDB that no really, they're all "dates."&lt;/p&gt;
&lt;p&gt;The logic there from a typical full stack developer was probably "we'll figure this out later" and later ended up coming, as it always does. Eventually the ease of not having to make an ETL process that can reconcile all of the ways the dirty data being sent to you represents dates becomes your headache or perhaps the headache of your DBA if you have one. Either your database slaps you on the hand and hisses at you for attempting to send it obviously wrong input or it stabs you in the back when you expect it to give you good results. There is no magic here, and as always there ain't no such thing as a free lunch.&lt;/p&gt;
&lt;p&gt;Besides &lt;a href="https://blog.codinghorror.com/why-cant-programmers-program/"&gt;FizzBuzz&lt;/a&gt; probably the best way to weed out &lt;strong&gt;bad&lt;/strong&gt; developers is to just get them talking about data management. That is modeling, cleanup, migration, etc. I haven't tried it much, but my working suspicion is that you will find a strong correlation between developers who don't put much attention to that with developers who don't put proper attention to testing, clean design and a host of other things. Data-related tasks are the boring &lt;em&gt;sine qua non&lt;/em&gt; of writing even a slightly complex application, and attention to detail here is a bellweather for the rest of their contributions.&lt;/p&gt;
&lt;p&gt;If you're a MongoDB developer who scoffs at any of this, I invite you to read &lt;a href="https://foone.wordpress.com/2019/02/14/normalization-of-deviance/"&gt;this article&lt;/a&gt;. If you need a TL;DR many systems that "seem to work" are merely lucky. If you don't take serious steps to ensure good data practices because you like to "move fast and break things," you almost assuredly will end up breaking something. That something might also be your application and the time it happens is when you're trying to impress a client, customer, VC, whatever.&lt;/p&gt;
&lt;p&gt;For those who use MongoDB and NiFi, the Record API will be an invaluable friend in a lot of cases. Avro is very flexible and easy going compared to a SQL schema. If you define a field as a long and someone supplies a string, Avro will kindly parse the string into a long. Nice things like that. If a team cannot agree to a data model and represent it with something as simple as Avro (or Thrift), then the team needs to be prepared to work in "interesting times."&lt;/p&gt;</content><category term="opinion"></category><category term="mongodb"></category><category term="data-engineering"></category></entry><entry><title>Using the S3 Processors with Minio</title><link href="https://mikethomsen.github.io/posts/2019/02/18/using-the-s3-processors-with-minio/" rel="alternate"></link><published>2019-02-18T00:00:00-05:00</published><updated>2019-02-18T00:00:00-05:00</updated><author><name>Mike Thomsen</name></author><id>tag:mikethomsen.github.io,2019-02-18:/posts/2019/02/18/using-the-s3-processors-with-minio/</id><summary type="html">&lt;p&gt;&lt;a href="https://minio.io/"&gt;Minio&lt;/a&gt; is a small S3-compatible server that can be really useful for internal use. To set it up with NiFi, &lt;a href="https://minio.io/downloads.html"&gt;download&lt;/a&gt; it an run it with this command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;./minio server ./minio_data&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It will then print out some information that looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Endpoint&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="mf"&gt;192.168&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;1.151&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;9000&lt;/span&gt;  &lt;span class="n"&gt;http â€¦&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://minio.io/"&gt;Minio&lt;/a&gt; is a small S3-compatible server that can be really useful for internal use. To set it up with NiFi, &lt;a href="https://minio.io/downloads.html"&gt;download&lt;/a&gt; it an run it with this command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;./minio server ./minio_data&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It will then print out some information that looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Endpoint&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="mf"&gt;192.168&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;1.151&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;9000&lt;/span&gt;  &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="mf"&gt;127.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;9000&lt;/span&gt;            
&lt;span class="n"&gt;AccessKey&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ACCESS_KEY_HERE&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; 
&lt;span class="n"&gt;SecretKey&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;SECRET_KEY_HERE&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="n"&gt;Browser&lt;/span&gt; &lt;span class="n"&gt;Access&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
   &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="mf"&gt;192.168&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;1.151&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;9000&lt;/span&gt;  &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="mf"&gt;127.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;9000&lt;/span&gt;            
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;At that point, you can connect with your browser and create a bucket.&lt;/p&gt;
&lt;p&gt;&lt;img alt="New Bucket" src="/post_assets/2019-02-18-s3-processors-with-minio/minio_new_bucket.png"&gt;&lt;/p&gt;
&lt;p&gt;Now all you have to do is drag one or more S3 processors onto the NiFi canvas and configure them with the bucket name, secret key, access key and then set the "Endpoint Override URL" to the Endpoint value that is printed out in the console.&lt;/p&gt;
&lt;p&gt;&lt;img alt="PutS3 Configuration" src="/post_assets/2019-02-18-s3-processors-with-minio/puts3.png"&gt;&lt;/p&gt;</content><category term="tutorial"></category><category term="aws"></category><category term="minio"></category><category term="s3"></category><category term="nifi"></category></entry><entry><title>Configuring OpenCypher and SSL on JanusGraph</title><link href="https://mikethomsen.github.io/posts/2019/02/17/configuring-opencypher-and-ssl-on-janusgraph/" rel="alternate"></link><published>2019-02-17T00:00:00-05:00</published><updated>2019-02-17T00:00:00-05:00</updated><author><name>Mike Thomsen</name></author><id>tag:mikethomsen.github.io,2019-02-17:/posts/2019/02/17/configuring-opencypher-and-ssl-on-janusgraph/</id><summary type="html">&lt;p&gt;OpenCypher is an implementation of the &lt;a href="https://en.wikipedia.org/wiki/Cypher_Query_Language"&gt;Cypher Query Language&lt;/a&gt; for graph databases other than Neo4J. This tutorial explains how to set up OpenCypher and SSL support in &lt;a href="https://github.com/JanusGraph/janusgraph/releases/tag/v0.3.1"&gt;JanusGraph 0.3.1&lt;/a&gt;. Newer versions of JanusGraph will hopefully use the newer TinkerPop 3.3.5+ configuration options to allow you to â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;OpenCypher is an implementation of the &lt;a href="https://en.wikipedia.org/wiki/Cypher_Query_Language"&gt;Cypher Query Language&lt;/a&gt; for graph databases other than Neo4J. This tutorial explains how to set up OpenCypher and SSL support in &lt;a href="https://github.com/JanusGraph/janusgraph/releases/tag/v0.3.1"&gt;JanusGraph 0.3.1&lt;/a&gt;. Newer versions of JanusGraph will hopefully use the newer TinkerPop 3.3.5+ configuration options to allow you to specify keystores (JKS or P12) instead of having to split up the stores into PEM files.&lt;/p&gt;
&lt;p&gt;The first step is obviously to download JanusGraph and explode the zip/tarball. &lt;a href="https://github.com/opencypher/cypher-for-gremlin"&gt;OpenCypher has two components&lt;/a&gt; that are relevant for this blog post, a console plugin and a server plugin. The console plugin enables you to test Cypher queries against a JanusGraph instance instantiated within the console, and the server plugin enables the Gremlin Server to receive Cypher queries and transpile them into Gremlin code behind the scenes.&lt;/p&gt;
&lt;p&gt;Once JanusGraph is downloaded, use its plugin loader to load the plugin. For the full documentation, go &lt;a href="https://github.com/opencypher/cypher-for-gremlin/tree/master/tinkerpop/cypher-gremlin-server-plugin"&gt;here&lt;/a&gt;. Otherwise, run this with 0.3.1 to install the server-side plugin:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;bin/gremlin-server.sh install org.opencypher.gremlin cypher-gremlin-server-plugin 0.9.12&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That should also update the YAML configuration file that JanusGraph bundles to include the proper updates to allow you to use the plugin.&lt;/p&gt;
&lt;p&gt;Now install the console plugin by running &lt;code&gt;bin/gremlin.sh&lt;/code&gt; to bring up the console, and then run this within the console (the &lt;code&gt;gremlin&amp;gt;&lt;/code&gt; part signifies the gremlin console prompt; don't type it):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;gremlin&amp;gt; :install org.opencypher.gremlin cypher-gremlin-console-plugin 0.9.12&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Full documentation for that &lt;a href="https://github.com/opencypher/cypher-for-gremlin/tree/master/tinkerpop/cypher-gremlin-console-plugin"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To setup SSL, download my sample certificates &lt;a href="/post_assets/2019-02-17-configuring-opencypher-and-ssl-on-janusgraph/janus_ssl.zip"&gt;here&lt;/a&gt;. You'll need to update two files now to be able to do local testing: &lt;code&gt;gremlin-server-janusgraph.yml&lt;/code&gt; and &lt;code&gt;remote-object.yml&lt;/code&gt;. Add the following block to former YAML file to enable SSL on the server.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nl"&gt;processors:&lt;/span&gt;
&lt;span class="nl"&gt;ssl:&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;enabled:&lt;/span&gt; &lt;span class="nf"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nl"&gt;keyFile:&lt;/span&gt; &lt;span class="nf"&gt;conf&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;localhost.key.pk8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nl"&gt;keyCertChainFile:&lt;/span&gt; &lt;span class="nf"&gt;conf&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;localhost.pem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nl"&gt;keyPassword:&lt;/span&gt; &lt;span class="nf"&gt;changeme&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nl"&gt;trustCertChainFile:&lt;/span&gt; &lt;span class="nf"&gt;conf&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;ca.pem&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now add this to &lt;code&gt;remote-objects.yml&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;connectionPool: {&lt;/span&gt;
&lt;span class="c"&gt;  enableSsl: true,&lt;/span&gt;
&lt;span class="c"&gt;  trustCertChainFile: conf/ca.pem&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The configuration file I use for local testing uses the BerkeleyJE option for the database. It looks like this minus comments:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;storage.backend=berkeleyje&lt;/span&gt;
&lt;span class="err"&gt;storage.directory=../db/berkeley&lt;/span&gt;
&lt;span class="err"&gt;gremlin.graph=org.janusgraph.core.JanusGraphFactory&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For some reason, it seems to want ElasticSearch running when the indexer is not manually specified. That can be setup with this docker-compose example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;version: &amp;quot;3&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;services:&lt;/span&gt;
&lt;span class="c"&gt;  elasticsearch:&lt;/span&gt;
&lt;span class="c"&gt;    image: docker.elastic.co/elasticsearch/elasticsearch:6.6.0&lt;/span&gt;
&lt;span class="c"&gt;    container_name: elasticsearch&lt;/span&gt;
&lt;span class="c"&gt;    hostname: elasticsearch&lt;/span&gt;
&lt;span class="c"&gt;    ports:&lt;/span&gt;
&lt;span class="c"&gt;      - 9200:9200&lt;/span&gt;
&lt;span class="c"&gt;      - 9300:9300&lt;/span&gt;
&lt;span class="c"&gt;  kibana:&lt;/span&gt;
&lt;span class="c"&gt;    image: docker.elastic.co/kibana/kibana:6.6.0&lt;/span&gt;
&lt;span class="c"&gt;    container_name: kibana&lt;/span&gt;
&lt;span class="c"&gt;    environment:&lt;/span&gt;
&lt;span class="c"&gt;      - &amp;quot;elasticsearch.username=elastic&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;      - &amp;quot;elasticsearch.password=changeme&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;    ports:&lt;/span&gt;
&lt;span class="c"&gt;      - 5601:5601&lt;/span&gt;
&lt;span class="c"&gt;    links:&lt;/span&gt;
&lt;span class="c"&gt;      - elasticsearch&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="tutorial"></category><category term="graph"></category></entry><entry><title>Using Python to process data from Apache NiFi</title><link href="https://mikethomsen.github.io/posts/2019/02/09/using-python-to-process-data-from-apache-nifi/" rel="alternate"></link><published>2019-02-09T00:00:00-05:00</published><updated>2019-02-09T00:00:00-05:00</updated><author><name>Mike Thomsen</name></author><id>tag:mikethomsen.github.io,2019-02-09:/posts/2019/02/09/using-python-to-process-data-from-apache-nifi/</id><summary type="html">&lt;p&gt;The scripting bundle that ships with the standard distribution of Apache NiFi is great for developers comfortable with the Java Virtual Machine, but doesn't provide much for people that want to use something like Python 3.X to process data in their flows. While you could write a REST service â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;The scripting bundle that ships with the standard distribution of Apache NiFi is great for developers comfortable with the Java Virtual Machine, but doesn't provide much for people that want to use something like Python 3.X to process data in their flows. While you could write a REST service in Python or some other language and call it that way, there are definite advantages to being able to call an external Python script directly from NiFi and pass the data to it.&lt;/p&gt;
&lt;p&gt;The processor that enables this is called &lt;code&gt;ExecuteStreamCommand&lt;/code&gt;. The first thing you do is write a Python script that is built around reading from &lt;code&gt;stdin&lt;/code&gt; and writing all output to be sent back to NiFi to &lt;code&gt;stdout&lt;/code&gt;. This is an example of one that will read a simple Excel spreadsheet, weed out bad fields and return a JSON array of its contents:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/usr/bin/python3&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;openpyxl&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;load_workbook&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="n"&gt;wb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;load_workbook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ws&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;wb&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Sheet1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;records&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;found_header&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ws&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Customer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;found_header&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;found_header&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
            &lt;span class="s2"&gt;&amp;quot;Customer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;Product&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;Price&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;records&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;found_header&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="n"&gt;found_header&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;

&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{0}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;records&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sort_keys&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;indent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;The sample data for it can be found &lt;a href="/post_assets/2019-02-09-executestreamprocessor/WorkBook Sample.xlsx"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now, add an &lt;code&gt;ExecuteStreamCommand&lt;/code&gt; processor to the NiFi canvas along with a &lt;code&gt;GetFile&lt;/code&gt; processor and some &lt;code&gt;LogAttribute&lt;/code&gt; processors and connect all of them. Configure &lt;code&gt;ExecuteStreamCommand&lt;/code&gt; similar to what is shown below:&lt;/p&gt;
&lt;p&gt;&lt;img alt="ExecuteStreamCommand configuration" src="/post_assets/2019-02-09-executestreamprocessor/ExecuteStreamCommand.png"&gt;&lt;/p&gt;
&lt;p&gt;If you load the spreadsheet with &lt;code&gt;GetFile&lt;/code&gt;, you'll see output that looks like this now:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Flow view" src="/post_assets/2019-02-09-executestreamprocessor/Flow View.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="JSON data" src="/post_assets/2019-02-09-executestreamprocessor/Data View.png"&gt;&lt;/p&gt;
&lt;p&gt;Download flow template &lt;a href="/post_assets/2019-02-09-executestreamprocessor/Excel_Example.xml"&gt;here&lt;/a&gt;&lt;/p&gt;</content><category term="tutorial"></category><category term="python"></category><category term="nifi"></category></entry><entry><title>Using Excel with Apache NiFi to make user data exchanges easier</title><link href="https://mikethomsen.github.io/posts/2018/12/08/using-excel-with-apache-nifi-to-make-user-data-exchanges-easier/" rel="alternate"></link><published>2018-12-08T00:00:00-05:00</published><updated>2018-12-08T00:00:00-05:00</updated><author><name>Mike Thomsen</name></author><id>tag:mikethomsen.github.io,2018-12-08:/posts/2018/12/08/using-excel-with-apache-nifi-to-make-user-data-exchanges-easier/</id><summary type="html">&lt;p&gt;It's very common in many situations for data engineers and others working with an organization's data to run into one or more situations where the data is delivered by people who just load it up in a spreadsheet and send it over. In most cases, they don't know better and â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's very common in many situations for data engineers and others working with an organization's data to run into one or more situations where the data is delivered by people who just load it up in a spreadsheet and send it over. In most cases, they don't know better and also don't have any tools that make the process better for them either. They're just doing the best they can with what they know and are given.&lt;/p&gt;
&lt;p&gt;Fortunately, NiFi is more than capable of handling these users and use cases thanks to the &lt;code&gt;ConvertExcelToCsv&lt;/code&gt; processor. It can even maintain the formatting of Excel cells to a degree, such as converting the internal representation of a date to whatever string format was specified for its formatting.&lt;/p&gt;
&lt;p&gt;If you find yourself in a situation like this, these are some things to explain to the users that will make it much easier for them to work with you.&lt;/p&gt;
&lt;h3&gt;Use Descriptive, Non-Duplicated Headers&lt;/h3&gt;
&lt;p&gt;The first line of a good Excel document that can be easily adapted should be a header line with no gaps between the fields, and each column header should be a good and descriptive name. There's no need to abbreviate. &lt;code&gt;First Name&lt;/code&gt; and &lt;code&gt;FirstName&lt;/code&gt; are fine for a person's first name, no need to keep it short like &lt;code&gt;fname&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It's important to also let them know that if they duplicate a header name, you won't be able to easily make it work for them. What you'll have to do is intercept the CSV output from &lt;code&gt;ConvertExcelToCsv&lt;/code&gt; and rewrite the header line. This is one of the reasons why descriptive headers are better; descriptive headers are less likely to be duplicated.&lt;/p&gt;
&lt;h3&gt;Do Not Explain The Data&lt;/h3&gt;
&lt;p&gt;Explanatory notes about the data should never be in the document, be it in a cell or a column header. If explanation is needed, just communicate it separately. Tell them that you appreciate them trying to clarify things, but the notes will just be confused for bad records.&lt;/p&gt;
&lt;h3&gt;When In Doubt, Leave It Blank&lt;/h3&gt;
&lt;p&gt;If a field is nullable in your schema or has a good default value, encourage users to just leave the field blank when they are manually building or converting the data. It's better for them to not type anything at all in such cases, especially when they might get the value wrong (ex. typing &lt;code&gt;NA&lt;/code&gt; instead of &lt;code&gt;N/A&lt;/code&gt; when &lt;code&gt;N/A&lt;/code&gt; is the required value for that situation).&lt;/p&gt;
&lt;p&gt;The ultimate goal is to encourage them to give you a data set that can be easily converted into a CSV file, which can in turn be used by the Record API.&lt;/p&gt;
&lt;p&gt;Excel, done right, can be a great format for receiving data from less technically-skilled teams and organizations. It's really not that difficult to educate such users on how to build a simple data set that lets them just fire an email and walk away. Often it's just copying and pasting data in a tool they already know. It can even be an effective way for organizations to bypass uncooperative IT departments that might scoff at NiFi reaching into departmental databases, setting up message queues, etc. &lt;/p&gt;</content><category term="tutorial"></category><category term="nifi"></category></entry><entry><title>How to script a NiFi LookupService</title><link href="https://mikethomsen.github.io/posts/2018/12/07/how-to-script-a-nifi-lookupservice/" rel="alternate"></link><published>2018-12-07T00:00:00-05:00</published><updated>2018-12-07T00:00:00-05:00</updated><author><name>Mike Thomsen</name></author><id>tag:mikethomsen.github.io,2018-12-07:/posts/2018/12/07/how-to-script-a-nifi-lookupservice/</id><summary type="html">&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;A while back, the concept of "lookup Services" was added to the Record API in Apache NiFi. The Record API was great, but it needed a clean way to enrich a record set that didn't involve parsing the entire record set and feeding it record-by-record to a script or â€¦&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;A while back, the concept of "lookup Services" was added to the Record API in Apache NiFi. The Record API was great, but it needed a clean way to enrich a record set that didn't involve parsing the entire record set and feeding it record-by-record to a script or custom processor. That's where the &lt;code&gt;LookupRecord&lt;/code&gt; processor and lookup services come in. &lt;/p&gt;
&lt;p&gt;NiFi comes with a lot of built-in lookup services that can do things ranging from a simple lookup on a CSV file, to enriching from a REST call, to enriching from a database entry. However, there are a lot of cases where enrichment needs to be done based on custom business logic. That's where the &lt;code&gt;ScriptedLookupService&lt;/code&gt; fits into the picture. It similar to &lt;code&gt;ExecuteScript&lt;/code&gt; or &lt;code&gt;InvokeScriptedProcessor&lt;/code&gt; in that it exposes a simple, programmable interface for writing scripts that implement your business logic.&lt;/p&gt;
&lt;p&gt;The example below can be tested using &lt;code&gt;LookupRecord&lt;/code&gt; with a configured &lt;code&gt;ScriptedLookupService&lt;/code&gt;. It has a single mandatory key, &lt;code&gt;message&lt;/code&gt;. To configure it, do the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Add a dynamic property to the &lt;code&gt;LookupRecord&lt;/code&gt; processor named &lt;code&gt;message&lt;/code&gt; and set it to a record path in your schema that points to a string field.&lt;/li&gt;
&lt;li&gt;Configure the processor property for output path to point a string field's record path in your schema so that the result can be set.&lt;/li&gt;
&lt;li&gt;Send a record set through the processor.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Example Code&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.apache.nifi.controller.ControllerServiceInitializationContext&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.apache.nifi.reporting.InitializationException&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SampleScriptedService&lt;/span&gt; &lt;span class="n"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;LookupService&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;lookup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;coords&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ofNullable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;String received a message: &lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt; + coords[&amp;#39;message&amp;#39;] + &amp;quot;&lt;/span&gt;\&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="n"&gt;Class&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;getValueType&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="n"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;getRequiredKeys&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;message&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="n"&gt;setLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logger&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="n"&gt;onEnabled&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="n"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ControllerServiceInitializationContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;InitializationException&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="n"&gt;Collection&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ValidationResult&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ValidationContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="n"&gt;PropertyDescriptor&lt;/span&gt; &lt;span class="n"&gt;getPropertyDescriptor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="n"&gt;onPropertyModified&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PropertyDescriptor&lt;/span&gt; &lt;span class="n"&gt;descriptor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;oldValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;newValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;PropertyDescriptor&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;getPropertyDescriptors&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;getIdentifier&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;lookupService&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;SampleScriptedService&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="tutorial"></category><category term="nifi"></category><category term="groovy"></category></entry><entry><title>Extracting emails from PST files with Apache NiFi</title><link href="https://mikethomsen.github.io/posts/2018/11/16/extracting-emails-from-pst-files-with-apache-nifi/" rel="alternate"></link><published>2018-11-16T00:00:00-05:00</published><updated>2018-11-16T00:00:00-05:00</updated><author><name>Mike Thomsen</name></author><id>tag:mikethomsen.github.io,2018-11-16:/posts/2018/11/16/extracting-emails-from-pst-files-with-apache-nifi/</id><summary type="html">&lt;p&gt;Why would you want to use NiFi to rip into Outlook PST files? Many reasons, ranging from helping with corporate legal compliance to forensics examinations. Perhaps even just to move email archives off the cloud and into an ElasticSearch cluster that is run by the local IT department to save â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Why would you want to use NiFi to rip into Outlook PST files? Many reasons, ranging from helping with corporate legal compliance to forensics examinations. Perhaps even just to move email archives off the cloud and into an ElasticSearch cluster that is run by the local IT department to save money when really old emails need to be researched or recovered.&lt;/p&gt;
&lt;p&gt;I tested the code against the Enron email set. You can grab a copy of it &lt;a href="http://info.nuix.com/Enron.html"&gt;here&lt;/a&gt;, and the license restrictions are almost non-existant for demo and research users.&lt;/p&gt;
&lt;p&gt;A compiled binary can be downloaded &lt;a href="https://github.com/MikeThomsen/nifi-email-extraction-bundle/releases/tag/1.0.0"&gt;here&lt;/a&gt;. It requires Apache NiFi 1.8.0.&lt;/p&gt;</content><category term="tutorial"></category><category term="nifi"></category><category term="forensics"></category><category term="email"></category></entry><entry><title>NiFi Data Generation Bundle 1.8.0 Released</title><link href="https://mikethomsen.github.io/posts/2018/11/04/nifi-data-generation-bundle-180-released/" rel="alternate"></link><published>2018-11-04T00:00:00-04:00</published><updated>2018-11-04T00:00:00-04:00</updated><author><name>Mike Thomsen</name></author><id>tag:mikethomsen.github.io,2018-11-04:/posts/2018/11/04/nifi-data-generation-bundle-180-released/</id><summary type="html">&lt;p&gt;Data generation bundle has been updated to support NiFi 1.8.0. The GenerateRecord processor now supports expression language, enabling scenarios like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;UserStatus&amp;quot;,
  &amp;quot;type&amp;quot;: &amp;quot;record&amp;quot;,
  &amp;quot;fields&amp;quot;: [
    {
      &amp;quot;name&amp;quot;: &amp;quot;login_status&amp;quot;,
      &amp;quot;type&amp;quot;: {
        &amp;quot;name&amp;quot;: &amp;quot;flag_enum&amp;quot;,
        &amp;quot;type&amp;quot;: &amp;quot;enum&amp;quot;,
        &amp;quot;symbols&amp;quot;: [ &amp;quot;LOGIN&amp;quot;, &amp;quot;LOGOUT&amp;quot;, &amp;quot;REJECTED&amp;quot; ]
      }
    },
    {
      &amp;quot;name&amp;quot;: &amp;quot;timestamp&amp;quot;,
      &amp;quot;type&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;long&amp;quot;,
        &amp;quot;logicalType&amp;quot;: &amp;quot;timestamp-millis&amp;quot;,
        &amp;quot;arg.properties&amp;quot;: {
          &amp;quot;range&amp;quot;: {
            &amp;quot;min â€¦&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Data generation bundle has been updated to support NiFi 1.8.0. The GenerateRecord processor now supports expression language, enabling scenarios like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;UserStatus&amp;quot;,
  &amp;quot;type&amp;quot;: &amp;quot;record&amp;quot;,
  &amp;quot;fields&amp;quot;: [
    {
      &amp;quot;name&amp;quot;: &amp;quot;login_status&amp;quot;,
      &amp;quot;type&amp;quot;: {
        &amp;quot;name&amp;quot;: &amp;quot;flag_enum&amp;quot;,
        &amp;quot;type&amp;quot;: &amp;quot;enum&amp;quot;,
        &amp;quot;symbols&amp;quot;: [ &amp;quot;LOGIN&amp;quot;, &amp;quot;LOGOUT&amp;quot;, &amp;quot;REJECTED&amp;quot; ]
      }
    },
    {
      &amp;quot;name&amp;quot;: &amp;quot;timestamp&amp;quot;,
      &amp;quot;type&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;long&amp;quot;,
        &amp;quot;logicalType&amp;quot;: &amp;quot;timestamp-millis&amp;quot;,
        &amp;quot;arg.properties&amp;quot;: {
          &amp;quot;range&amp;quot;: {
            &amp;quot;min&amp;quot;: &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;&lt;span class="n"&gt;toNumber&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;&lt;span class="n"&gt;minus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7776000000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;,
            &amp;quot;max&amp;quot;: &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;&lt;span class="n"&gt;toNumber&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
          }
        }
      }
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Binaries for NiFi 1.8.0 can be downloaded &lt;a href="https://github.com/MikeThomsen/nifi-datageneration-bundle/releases/tag/1.8.0"&gt;here&lt;/a&gt;&lt;/p&gt;</content><category term="tutorial"></category><category term="nifi"></category><category term="data-engineering"></category></entry><entry><title>Setting Up JanusGraph Locally (with HBase)</title><link href="https://mikethomsen.github.io/posts/2018/10/15/setting-up-janusgraph-locally-with-hbase/" rel="alternate"></link><published>2018-10-15T00:00:00-04:00</published><updated>2018-10-15T00:00:00-04:00</updated><author><name>Mike Thomsen</name></author><id>tag:mikethomsen.github.io,2018-10-15:/posts/2018/10/15/setting-up-janusgraph-locally-with-hbase/</id><summary type="html">&lt;h1&gt;Setting Up JanusGraph Locally&lt;/h1&gt;
&lt;h2&gt;Setup HBase&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.apache.org/dyn/closer.lua/hbase/1.2.7/hbase-1.2.7-bin.tar.gz"&gt;Download HBase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tar -zxvf hbase-1.2.7-bin.tar.gz&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd hbase-1.2.7-bin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;./bin/hbase master&lt;/code&gt; (and wait about 5-12 seconds for it to finish starting)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Setup ElasticSearch&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;docker run --name es-janus -p 9200:9200 docker.elastic.co/elasticsearch/elasticsearch:6.4.2&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Setup â€¦&lt;/h2&gt;</summary><content type="html">&lt;h1&gt;Setting Up JanusGraph Locally&lt;/h1&gt;
&lt;h2&gt;Setup HBase&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.apache.org/dyn/closer.lua/hbase/1.2.7/hbase-1.2.7-bin.tar.gz"&gt;Download HBase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tar -zxvf hbase-1.2.7-bin.tar.gz&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd hbase-1.2.7-bin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;./bin/hbase master&lt;/code&gt; (and wait about 5-12 seconds for it to finish starting)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Setup ElasticSearch&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;docker run --name es-janus -p 9200:9200 docker.elastic.co/elasticsearch/elasticsearch:6.4.2&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Setup JanusGraph&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/JanusGraph/janusgraph/releases/"&gt;Download the latest release&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Expand archive&lt;/li&gt;
&lt;li&gt;Drop in the database configuration into &lt;code&gt;$JANUS_ROOT/conf/janusgraph-hbase-es.properties&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Drop in the gremlin-server-janusgraph.yaml configuration into &lt;code&gt;$JANUS_ROOT/conf/gremlin-server-janusgraph.yaml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bin/gremlin-server.sh conf/gremlin-server-janusgraph.yaml&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Database Configuration&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;backend&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;hbase&lt;/span&gt;

&lt;span class="k"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hostname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;127&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="k"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;

&lt;span class="k"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;clean&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;

&lt;span class="k"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;180000&lt;/span&gt;

&lt;span class="k"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;

&lt;span class="k"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;search&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;backend&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;elasticsearch&lt;/span&gt;

&lt;span class="k"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;search&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hostname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;127&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="n"&gt;gremlin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;graph&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;janusgraph&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JanusGraphFactory&lt;/span&gt;

&lt;span class="k"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;JanusGraph Gremlin Server Configuration&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;localhost&lt;/span&gt;
&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8182&lt;/span&gt;
&lt;span class="n"&gt;channelizer&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;apache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;tinkerpop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;gremlin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;HttpChannelizer&lt;/span&gt;
&lt;span class="n"&gt;graphs&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;graph&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;janusgraph&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;hbase&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;es&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;scriptEngines&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;gremlin&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;groovy&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;plugins&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;janusgraph&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;graphdb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;tinkerpop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;plugin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;JanusGraphGremlinPlugin&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;{},&lt;/span&gt;
               &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;apache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;tinkerpop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;gremlin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;jsr223&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;GremlinServerGremlinPlugin&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;{},&lt;/span&gt;
               &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;apache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;tinkerpop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;gremlin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;tinkergraph&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;jsr223&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;TinkerGraphGremlinPlugin&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;{},&lt;/span&gt;
               &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;apache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;tinkerpop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;gremlin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;jsr223&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ImportGremlinPlugin&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;classImports&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt; &lt;span class="n"&gt;methodImports&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Math&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="o"&gt;*]},&lt;/span&gt;
               &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;apache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;tinkerpop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;gremlin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;jsr223&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ScriptFileGremlinPlugin&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;scripts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;janusgraph&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;groovy&lt;/span&gt;&lt;span class="o"&gt;]}}}}&lt;/span&gt;
&lt;span class="n"&gt;serializers&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;className&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;apache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;tinkerpop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;gremlin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;GryoMessageSerializerV3d0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;ioRegistries&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;janusgraph&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;graphdb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;tinkerpop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;JanusGraphIoRegistry&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;}}&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;className&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;apache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;tinkerpop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;gremlin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;GryoMessageSerializerV3d0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;serializeResultToString&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="o"&gt;}}&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;className&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;apache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;tinkerpop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;gremlin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;GraphSONMessageSerializerV3d0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;ioRegistries&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;janusgraph&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;graphdb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;tinkerpop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;JanusGraphIoRegistry&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;}}&lt;/span&gt;
&lt;span class="n"&gt;metrics&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;slf4jReporter&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;enabled&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;interval&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;180000&lt;/span&gt;&lt;span class="o"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Setup Test Data&lt;/h2&gt;
&lt;p&gt;Full steps &lt;a href="https://docs.janusgraph.org/latest/getting-started.html"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bin/gremlin.sh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;graph = JanusGraphFactory.open('conf/janusgraph-hbase-es.properties')&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GraphOfTheGodsFactory.load(graph)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;curl -XPOST -H "Content-Type: application/json" -d '{"gremlin":"g.V().has(\"name\", \"saturn\").valueMap()"}' -v http://127.0.0.1:8182&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Should result in:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;    &amp;quot;requestId&amp;quot;: &amp;quot;9d6e4363-2d50-4971-a1aa-cb946a25e59d&amp;quot;,&lt;/span&gt;
&lt;span class="err"&gt;    &amp;quot;status&amp;quot;: {&lt;/span&gt;
&lt;span class="err"&gt;        &amp;quot;message&amp;quot;: &amp;quot;&amp;quot;,&lt;/span&gt;
&lt;span class="err"&gt;        &amp;quot;code&amp;quot;: 200,&lt;/span&gt;
&lt;span class="err"&gt;        &amp;quot;attributes&amp;quot;: {&lt;/span&gt;
&lt;span class="err"&gt;            &amp;quot;@type&amp;quot;: &amp;quot;g:Map&amp;quot;,&lt;/span&gt;
&lt;span class="err"&gt;            &amp;quot;@value&amp;quot;: []&lt;/span&gt;
&lt;span class="err"&gt;        }&lt;/span&gt;
&lt;span class="err"&gt;    },&lt;/span&gt;
&lt;span class="err"&gt;    &amp;quot;result&amp;quot;: {&lt;/span&gt;
&lt;span class="err"&gt;        &amp;quot;data&amp;quot;: {&lt;/span&gt;
&lt;span class="err"&gt;            &amp;quot;@type&amp;quot;: &amp;quot;g:List&amp;quot;,&lt;/span&gt;
&lt;span class="err"&gt;            &amp;quot;@value&amp;quot;: [{&lt;/span&gt;
&lt;span class="err"&gt;                &amp;quot;@type&amp;quot;: &amp;quot;g:Map&amp;quot;,&lt;/span&gt;
&lt;span class="err"&gt;                &amp;quot;@value&amp;quot;: [&amp;quot;name&amp;quot;, {&lt;/span&gt;
&lt;span class="err"&gt;                    &amp;quot;@type&amp;quot;: &amp;quot;g:List&amp;quot;,&lt;/span&gt;
&lt;span class="err"&gt;                    &amp;quot;@value&amp;quot;: [&amp;quot;saturn&amp;quot;]&lt;/span&gt;
&lt;span class="err"&gt;                }, &amp;quot;age&amp;quot;, {&lt;/span&gt;
&lt;span class="err"&gt;                    &amp;quot;@type&amp;quot;: &amp;quot;g:List&amp;quot;,&lt;/span&gt;
&lt;span class="err"&gt;                    &amp;quot;@value&amp;quot;: [{&lt;/span&gt;
&lt;span class="err"&gt;                        &amp;quot;@type&amp;quot;: &amp;quot;g:Int32&amp;quot;,&lt;/span&gt;
&lt;span class="err"&gt;                        &amp;quot;@value&amp;quot;: 10000&lt;/span&gt;
&lt;span class="err"&gt;                    }]&lt;/span&gt;
&lt;span class="err"&gt;                }]&lt;/span&gt;
&lt;span class="err"&gt;            }]&lt;/span&gt;
&lt;span class="err"&gt;        },&lt;/span&gt;
&lt;span class="err"&gt;        &amp;quot;meta&amp;quot;: {&lt;/span&gt;
&lt;span class="err"&gt;            &amp;quot;@type&amp;quot;: &amp;quot;g:Map&amp;quot;,&lt;/span&gt;
&lt;span class="err"&gt;            &amp;quot;@value&amp;quot;: []&lt;/span&gt;
&lt;span class="err"&gt;        }&lt;/span&gt;
&lt;span class="err"&gt;    }&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="tutorial"></category><category term="nifi"></category><category term="graph"></category><category term="hadoop"></category></entry><entry><title>Setting up Elasticsearch Document-Level Security</title><link href="https://mikethomsen.github.io/posts/2018/10/11/setting-up-elasticsearch-document-level-security/" rel="alternate"></link><published>2018-10-11T08:47:00-04:00</published><updated>2018-10-11T08:47:00-04:00</updated><author><name>Mike Thomsen</name></author><id>tag:mikethomsen.github.io,2018-10-11:/posts/2018/10/11/setting-up-elasticsearch-document-level-security/</id><summary type="html">&lt;h2&gt;Docker Compose&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;version: &amp;quot;3&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;services:&lt;/span&gt;
&lt;span class="c"&gt;  elasticsearch:&lt;/span&gt;
&lt;span class="c"&gt;    image: docker.elastic.co/elasticsearch/elasticsearch:6.4.2&lt;/span&gt;
&lt;span class="c"&gt;    container_name: elasticsearch&lt;/span&gt;
&lt;span class="c"&gt;    ports:&lt;/span&gt;
&lt;span class="c"&gt;      - 9200:9200&lt;/span&gt;
&lt;span class="c"&gt;      - 9300:9300&lt;/span&gt;
&lt;span class="c"&gt;    environment:&lt;/span&gt;
&lt;span class="c"&gt;      - &amp;quot;discovery.type=single-node&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;      - &amp;quot;xpack.security.enabled=true&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;  kibana:&lt;/span&gt;
&lt;span class="c"&gt;    image: docker.elastic.co/kibana/kibana:6.4.2&lt;/span&gt;
&lt;span class="c"&gt;    container_name: kibana&lt;/span&gt;
&lt;span class="c"&gt;    environment:&lt;/span&gt;
&lt;span class="c"&gt;      - &amp;quot;elasticsearch.username=elastic&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;      - &amp;quot;elasticsearch.password=changeme&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;    ports â€¦&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h2&gt;Docker Compose&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;version: &amp;quot;3&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;services:&lt;/span&gt;
&lt;span class="c"&gt;  elasticsearch:&lt;/span&gt;
&lt;span class="c"&gt;    image: docker.elastic.co/elasticsearch/elasticsearch:6.4.2&lt;/span&gt;
&lt;span class="c"&gt;    container_name: elasticsearch&lt;/span&gt;
&lt;span class="c"&gt;    ports:&lt;/span&gt;
&lt;span class="c"&gt;      - 9200:9200&lt;/span&gt;
&lt;span class="c"&gt;      - 9300:9300&lt;/span&gt;
&lt;span class="c"&gt;    environment:&lt;/span&gt;
&lt;span class="c"&gt;      - &amp;quot;discovery.type=single-node&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;      - &amp;quot;xpack.security.enabled=true&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;  kibana:&lt;/span&gt;
&lt;span class="c"&gt;    image: docker.elastic.co/kibana/kibana:6.4.2&lt;/span&gt;
&lt;span class="c"&gt;    container_name: kibana&lt;/span&gt;
&lt;span class="c"&gt;    environment:&lt;/span&gt;
&lt;span class="c"&gt;      - &amp;quot;elasticsearch.username=elastic&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;      - &amp;quot;elasticsearch.password=changeme&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;    ports:&lt;/span&gt;
&lt;span class="c"&gt;      - 5601:5601&lt;/span&gt;
&lt;span class="c"&gt;    links:&lt;/span&gt;
&lt;span class="c"&gt;      - elasticsearch&lt;/span&gt;
&lt;span class="c"&gt;    volumes:&lt;/span&gt;
&lt;span class="c"&gt;      - ./kibana.yml:/usr/share/kibana/config/kibana.yml:ro&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Setup Passwords&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;docker exec -it elasticsearch bin/elasticsearch-setup-passwords interactive&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Set each one to &lt;code&gt;changeme&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Create Test Index&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;PUT documents&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;  &amp;quot;mappings&amp;quot;: {&lt;/span&gt;
&lt;span class="err"&gt;    &amp;quot;document&amp;quot;: {&lt;/span&gt;
&lt;span class="err"&gt;      &amp;quot;properties&amp;quot;: {&lt;/span&gt;
&lt;span class="err"&gt;        &amp;quot;category&amp;quot;: {&lt;/span&gt;
&lt;span class="err"&gt;          &amp;quot;type&amp;quot;: &amp;quot;keyword&amp;quot;&lt;/span&gt;
&lt;span class="err"&gt;        },&lt;/span&gt;
&lt;span class="err"&gt;        &amp;quot;document_id&amp;quot;: {&lt;/span&gt;
&lt;span class="err"&gt;          &amp;quot;type&amp;quot;: &amp;quot;keyword&amp;quot;&lt;/span&gt;
&lt;span class="err"&gt;        },&lt;/span&gt;
&lt;span class="err"&gt;        &amp;quot;title&amp;quot;: {&lt;/span&gt;
&lt;span class="err"&gt;          &amp;quot;type&amp;quot;: &amp;quot;text&amp;quot;&lt;/span&gt;
&lt;span class="err"&gt;        }&lt;/span&gt;
&lt;span class="err"&gt;      }&lt;/span&gt;
&lt;span class="err"&gt;    }&lt;/span&gt;
&lt;span class="err"&gt;  }&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Create User Roles&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;POST /_xpack/security/role/restricted_role&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;  &amp;quot;indices&amp;quot;: [&lt;/span&gt;
&lt;span class="err"&gt;    {&lt;/span&gt;
&lt;span class="err"&gt;      &amp;quot;names&amp;quot;: [ &amp;quot;documents&amp;quot; ],&lt;/span&gt;
&lt;span class="err"&gt;      &amp;quot;privileges&amp;quot;: [ &amp;quot;read&amp;quot; ],&lt;/span&gt;
&lt;span class="err"&gt;      &amp;quot;query&amp;quot;: &amp;quot;{\&amp;quot;match\&amp;quot;: {\&amp;quot;category\&amp;quot;: \&amp;quot;restricted\&amp;quot;}}&amp;quot;&lt;/span&gt;
&lt;span class="err"&gt;    }&lt;/span&gt;
&lt;span class="err"&gt;  ]&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;POST /_xpack/security/role/unrestricted_role&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;  &amp;quot;indices&amp;quot; : [&lt;/span&gt;
&lt;span class="err"&gt;    {&lt;/span&gt;
&lt;span class="err"&gt;      &amp;quot;names&amp;quot; : [ &amp;quot;documents&amp;quot; ],&lt;/span&gt;
&lt;span class="err"&gt;      &amp;quot;privileges&amp;quot; : [ &amp;quot;read&amp;quot; ],&lt;/span&gt;
&lt;span class="err"&gt;      &amp;quot;query&amp;quot;: &amp;quot;{\&amp;quot;bool\&amp;quot;: {\&amp;quot;must_not\&amp;quot;: [ { \&amp;quot;match\&amp;quot;: { \&amp;quot;category\&amp;quot;: \&amp;quot;restricted\&amp;quot;}} ] } }&amp;quot;&lt;/span&gt;
&lt;span class="err"&gt;    }&lt;/span&gt;
&lt;span class="err"&gt;  ]&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Create two users in Kibana as &lt;code&gt;elastic&lt;/code&gt; user:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;unrestricted_user&lt;/li&gt;
&lt;li&gt;Roles: &lt;code&gt;kibana_user&lt;/code&gt;, &lt;code&gt;restricted_role&lt;/code&gt;, &lt;code&gt;unrestricted_role&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;restricted_user&lt;/li&gt;
&lt;li&gt;Roles: &lt;code&gt;kibana_user&lt;/code&gt;, &lt;code&gt;restricted_role&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Add Sample Data&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;POST documents/document/1&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;  &amp;quot;category&amp;quot;: &amp;quot;restricted&amp;quot;,&lt;/span&gt;
&lt;span class="err"&gt;  &amp;quot;document_id&amp;quot;: &amp;quot;ABCDEFG&amp;quot;,&lt;/span&gt;
&lt;span class="err"&gt;  &amp;quot;title&amp;quot;: &amp;quot;Hello, world&amp;quot;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;POST documents/document/2&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;  &amp;quot;category&amp;quot;: &amp;quot;unrestricted&amp;quot;,&lt;/span&gt;
&lt;span class="err"&gt;  &amp;quot;document_id&amp;quot;: &amp;quot;IJKLMN&amp;quot;,&lt;/span&gt;
&lt;span class="err"&gt;  &amp;quot;title&amp;quot;: &amp;quot;Goodbye, cruel world&amp;quot;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;POST documents/document/3&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;  &amp;quot;category&amp;quot;: &amp;quot;sensitive&amp;quot;,&lt;/span&gt;
&lt;span class="err"&gt;  &amp;quot;document_id&amp;quot;: &amp;quot;OPQRS&amp;quot;,&lt;/span&gt;
&lt;span class="err"&gt;  &amp;quot;title&amp;quot;: &amp;quot;Third category document&amp;quot;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Testing&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;GET documents/_search&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;  &amp;quot;query&amp;quot;: {&lt;/span&gt;
&lt;span class="err"&gt;    &amp;quot;match_all&amp;quot;: {}&lt;/span&gt;
&lt;span class="err"&gt;  }&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Expected Results For Unrestricted User&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;  &amp;quot;took&amp;quot;: 3,&lt;/span&gt;
&lt;span class="err"&gt;  &amp;quot;timed_out&amp;quot;: false,&lt;/span&gt;
&lt;span class="err"&gt;  &amp;quot;_shards&amp;quot;: {&lt;/span&gt;
&lt;span class="err"&gt;    &amp;quot;total&amp;quot;: 5,&lt;/span&gt;
&lt;span class="err"&gt;    &amp;quot;successful&amp;quot;: 5,&lt;/span&gt;
&lt;span class="err"&gt;    &amp;quot;skipped&amp;quot;: 0,&lt;/span&gt;
&lt;span class="err"&gt;    &amp;quot;failed&amp;quot;: 0&lt;/span&gt;
&lt;span class="err"&gt;  },&lt;/span&gt;
&lt;span class="err"&gt;  &amp;quot;hits&amp;quot;: {&lt;/span&gt;
&lt;span class="err"&gt;    &amp;quot;total&amp;quot;: 3,&lt;/span&gt;
&lt;span class="err"&gt;    &amp;quot;max_score&amp;quot;: 1,&lt;/span&gt;
&lt;span class="err"&gt;    &amp;quot;hits&amp;quot;: [&lt;/span&gt;
&lt;span class="err"&gt;      {&lt;/span&gt;
&lt;span class="err"&gt;        &amp;quot;_index&amp;quot;: &amp;quot;documents&amp;quot;,&lt;/span&gt;
&lt;span class="err"&gt;        &amp;quot;_type&amp;quot;: &amp;quot;document&amp;quot;,&lt;/span&gt;
&lt;span class="err"&gt;        &amp;quot;_id&amp;quot;: &amp;quot;2&amp;quot;,&lt;/span&gt;
&lt;span class="err"&gt;        &amp;quot;_score&amp;quot;: 1,&lt;/span&gt;
&lt;span class="err"&gt;        &amp;quot;_source&amp;quot;: {&lt;/span&gt;
&lt;span class="err"&gt;          &amp;quot;category&amp;quot;: &amp;quot;unrestricted&amp;quot;,&lt;/span&gt;
&lt;span class="err"&gt;          &amp;quot;document_id&amp;quot;: &amp;quot;IJKLMN&amp;quot;,&lt;/span&gt;
&lt;span class="err"&gt;          &amp;quot;title&amp;quot;: &amp;quot;Goodbye, cruel world&amp;quot;&lt;/span&gt;
&lt;span class="err"&gt;        }&lt;/span&gt;
&lt;span class="err"&gt;      },&lt;/span&gt;
&lt;span class="err"&gt;      {&lt;/span&gt;
&lt;span class="err"&gt;        &amp;quot;_index&amp;quot;: &amp;quot;documents&amp;quot;,&lt;/span&gt;
&lt;span class="err"&gt;        &amp;quot;_type&amp;quot;: &amp;quot;document&amp;quot;,&lt;/span&gt;
&lt;span class="err"&gt;        &amp;quot;_id&amp;quot;: &amp;quot;1&amp;quot;,&lt;/span&gt;
&lt;span class="err"&gt;        &amp;quot;_score&amp;quot;: 1,&lt;/span&gt;
&lt;span class="err"&gt;        &amp;quot;_source&amp;quot;: {&lt;/span&gt;
&lt;span class="err"&gt;          &amp;quot;category&amp;quot;: &amp;quot;restricted&amp;quot;,&lt;/span&gt;
&lt;span class="err"&gt;          &amp;quot;document_id&amp;quot;: &amp;quot;ABCDEFG&amp;quot;,&lt;/span&gt;
&lt;span class="err"&gt;          &amp;quot;title&amp;quot;: &amp;quot;Hello, world&amp;quot;&lt;/span&gt;
&lt;span class="err"&gt;        }&lt;/span&gt;
&lt;span class="err"&gt;      },&lt;/span&gt;
&lt;span class="err"&gt;      {&lt;/span&gt;
&lt;span class="err"&gt;        &amp;quot;_index&amp;quot;: &amp;quot;documents&amp;quot;,&lt;/span&gt;
&lt;span class="err"&gt;        &amp;quot;_type&amp;quot;: &amp;quot;document&amp;quot;,&lt;/span&gt;
&lt;span class="err"&gt;        &amp;quot;_id&amp;quot;: &amp;quot;3&amp;quot;,&lt;/span&gt;
&lt;span class="err"&gt;        &amp;quot;_score&amp;quot;: 1,&lt;/span&gt;
&lt;span class="err"&gt;        &amp;quot;_source&amp;quot;: {&lt;/span&gt;
&lt;span class="err"&gt;          &amp;quot;category&amp;quot;: &amp;quot;sbu&amp;quot;,&lt;/span&gt;
&lt;span class="err"&gt;          &amp;quot;document_id&amp;quot;: &amp;quot;OPQRS&amp;quot;,&lt;/span&gt;
&lt;span class="err"&gt;          &amp;quot;title&amp;quot;: &amp;quot;Third category document&amp;quot;&lt;/span&gt;
&lt;span class="err"&gt;        }&lt;/span&gt;
&lt;span class="err"&gt;      }&lt;/span&gt;
&lt;span class="err"&gt;    ]&lt;/span&gt;
&lt;span class="err"&gt;  }&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Expected Results for Restricted User&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;  &amp;quot;took&amp;quot;: 3,&lt;/span&gt;
&lt;span class="err"&gt;  &amp;quot;timed_out&amp;quot;: false,&lt;/span&gt;
&lt;span class="err"&gt;  &amp;quot;_shards&amp;quot;: {&lt;/span&gt;
&lt;span class="err"&gt;    &amp;quot;total&amp;quot;: 5,&lt;/span&gt;
&lt;span class="err"&gt;    &amp;quot;successful&amp;quot;: 5,&lt;/span&gt;
&lt;span class="err"&gt;    &amp;quot;skipped&amp;quot;: 0,&lt;/span&gt;
&lt;span class="err"&gt;    &amp;quot;failed&amp;quot;: 0&lt;/span&gt;
&lt;span class="err"&gt;  },&lt;/span&gt;
&lt;span class="err"&gt;  &amp;quot;hits&amp;quot;: {&lt;/span&gt;
&lt;span class="err"&gt;    &amp;quot;total&amp;quot;: 2,&lt;/span&gt;
&lt;span class="err"&gt;    &amp;quot;max_score&amp;quot;: 1,&lt;/span&gt;
&lt;span class="err"&gt;    &amp;quot;hits&amp;quot;: [&lt;/span&gt;
&lt;span class="err"&gt;      {&lt;/span&gt;
&lt;span class="err"&gt;        &amp;quot;_index&amp;quot;: &amp;quot;documents&amp;quot;,&lt;/span&gt;
&lt;span class="err"&gt;        &amp;quot;_type&amp;quot;: &amp;quot;document&amp;quot;,&lt;/span&gt;
&lt;span class="err"&gt;        &amp;quot;_id&amp;quot;: &amp;quot;2&amp;quot;,&lt;/span&gt;
&lt;span class="err"&gt;        &amp;quot;_score&amp;quot;: 1,&lt;/span&gt;
&lt;span class="err"&gt;        &amp;quot;_source&amp;quot;: {&lt;/span&gt;
&lt;span class="err"&gt;          &amp;quot;category&amp;quot;: &amp;quot;unrestricted&amp;quot;,&lt;/span&gt;
&lt;span class="err"&gt;          &amp;quot;document_id&amp;quot;: &amp;quot;IJKLMN&amp;quot;,&lt;/span&gt;
&lt;span class="err"&gt;          &amp;quot;title&amp;quot;: &amp;quot;Goodbye, cruel world&amp;quot;&lt;/span&gt;
&lt;span class="err"&gt;        }&lt;/span&gt;
&lt;span class="err"&gt;      },&lt;/span&gt;
&lt;span class="err"&gt;      {&lt;/span&gt;
&lt;span class="err"&gt;        &amp;quot;_index&amp;quot;: &amp;quot;documents&amp;quot;,&lt;/span&gt;
&lt;span class="err"&gt;        &amp;quot;_type&amp;quot;: &amp;quot;document&amp;quot;,&lt;/span&gt;
&lt;span class="err"&gt;        &amp;quot;_id&amp;quot;: &amp;quot;3&amp;quot;,&lt;/span&gt;
&lt;span class="err"&gt;        &amp;quot;_score&amp;quot;: 1,&lt;/span&gt;
&lt;span class="err"&gt;        &amp;quot;_source&amp;quot;: {&lt;/span&gt;
&lt;span class="err"&gt;          &amp;quot;category&amp;quot;: &amp;quot;sbu&amp;quot;,&lt;/span&gt;
&lt;span class="err"&gt;          &amp;quot;document_id&amp;quot;: &amp;quot;OPQRS&amp;quot;,&lt;/span&gt;
&lt;span class="err"&gt;          &amp;quot;title&amp;quot;: &amp;quot;Third category document&amp;quot;&lt;/span&gt;
&lt;span class="err"&gt;        }&lt;/span&gt;
&lt;span class="err"&gt;      }&lt;/span&gt;
&lt;span class="err"&gt;    ]&lt;/span&gt;
&lt;span class="err"&gt;  }&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="tutorial"></category><category term="elastic"></category><category term="nifi"></category><category term="security"></category></entry><entry><title>Building PDFS with Apache Nifi</title><link href="https://mikethomsen.github.io/posts/2018/05/10/building-pdfs-with-apache-nifi/" rel="alternate"></link><published>2018-05-10T00:00:00-04:00</published><updated>2018-05-10T00:00:00-04:00</updated><author><name>Mike Thomsen</name></author><id>tag:mikethomsen.github.io,2018-05-10:/posts/2018/05/10/building-pdfs-with-apache-nifi/</id><summary type="html">&lt;p&gt;I just released a new NiFi processor that provides the ability to generate a PDF from flowfile contents, attributes or both. It can be downloaded from &lt;a href="https://github.com/MikeThomsen/nifi-pdf-generator-bundle"&gt;here&lt;/a&gt;. For right now, it references NiFi 1.7.0-SNAPSHOT as a requirement, but I might bump that down to 1.6.0 or â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;I just released a new NiFi processor that provides the ability to generate a PDF from flowfile contents, attributes or both. It can be downloaded from &lt;a href="https://github.com/MikeThomsen/nifi-pdf-generator-bundle"&gt;here&lt;/a&gt;. For right now, it references NiFi 1.7.0-SNAPSHOT as a requirement, but I might bump that down to 1.6.0 or even 1.5.0 later once I have time to test it.&lt;/p&gt;
&lt;p&gt;It's powered by iText 7 community edition, so unfortunately all of the code in that repo I linked to is currently under the AGPL. (That also means it's not going to be ever merged into NiFi itself because the ASF prohibits the use of AGPL dependencies)&lt;/p&gt;
&lt;p&gt;The processor uses Mustache templates to build HTML file, which are in turn converted to PDFs using iText. An example use case would be to set up a nightly aggregation to be run on MongoDB or ElasticSearch that is then fed to this process to provided statistics on a data set.&lt;/p&gt;</content><category term="tutorial"></category><category term="nifi"></category><category term="data-engineering"></category></entry><entry><title>KSQL and Apache NiFi (Part I)</title><link href="https://mikethomsen.github.io/posts/2018/05/07/ksql-and-apache-nifi-part-i/" rel="alternate"></link><published>2018-05-07T17:47:00-04:00</published><updated>2018-05-07T17:47:00-04:00</updated><author><name>Mike Thomsen</name></author><id>tag:mikethomsen.github.io,2018-05-07:/posts/2018/05/07/ksql-and-apache-nifi-part-i/</id><summary type="html">&lt;h1&gt;KSQL and Apache NiFi (Part I)&lt;/h1&gt;
&lt;p&gt;If you haven't heard about KSQL, which is Confluent's new(ish) SQL engine built on top of Apache Kafka, check out some of these links:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.confluent.io/product/ksql/"&gt;KSQL Product Page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.confluent.io/blog/ksql-in-action-real-time-streaming-etl-from-oracle-transactional-data"&gt;KSQL in Action&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.confluent.io/current/ksql/docs/tutorials/basics-docker.html#ksql-quickstart-docker"&gt;Writing Streaming Queries against Kafka using KSQL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So let's say you want to â€¦&lt;/p&gt;</summary><content type="html">&lt;h1&gt;KSQL and Apache NiFi (Part I)&lt;/h1&gt;
&lt;p&gt;If you haven't heard about KSQL, which is Confluent's new(ish) SQL engine built on top of Apache Kafka, check out some of these links:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.confluent.io/product/ksql/"&gt;KSQL Product Page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.confluent.io/blog/ksql-in-action-real-time-streaming-etl-from-oracle-transactional-data"&gt;KSQL in Action&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.confluent.io/current/ksql/docs/tutorials/basics-docker.html#ksql-quickstart-docker"&gt;Writing Streaming Queries against Kafka using KSQL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So let's say you want to track a bunch of messages published by your users using a simple JSON format that looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;    &amp;quot;username&amp;quot;: &amp;quot;john.smith&amp;quot;,&lt;/span&gt;
&lt;span class="err"&gt;    &amp;quot;msg&amp;quot;: &amp;quot;Hello, world&amp;quot;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Using KSQL, you can define a Kafka Stream from the topic &lt;code&gt;input_messages&lt;/code&gt; using the following KSQL statement:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;CREATE STREAM messages (username varchar, msg varchar) WITH (kafka_topic=&amp;#39;input_messages&amp;#39;, value_format=&amp;#39;JSON&amp;#39;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For now, that doesn't do much for you beyond create a topic and let you run SQL statements like SELECT operations on it. However, suppose you want to spy on &lt;code&gt;john.smith&lt;/code&gt;. You can now do this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;CREATE STREAM from_john_smith WITH (kafka_topic=&amp;#39;from_john_smith&amp;#39;, value_format=&amp;#39;JSON&amp;#39;) AS SELECT username, msg FROM messages WHERE username = &amp;#39;john.smith&amp;#39;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now you've chained a new stream onto the &lt;code&gt;messages&lt;/code&gt; stream and KSQL will examine incoming messages in the &lt;code&gt;messages&lt;/code&gt; stream and put them into the topic that is the foundation for the &lt;code&gt;from_john_smith&lt;/code&gt; stream. A traditional Kafka consumer client can just subscribe to &lt;code&gt;from_john_smith&lt;/code&gt; (the topic) and be blissfully ignorant of the routing details that got the message there.&lt;/p&gt;
&lt;p&gt;This is where Apache NiFi can come in. Apache NiFi is very high throughput for processing ETL operations, particularly from sources like Kafka. However, like all ETL and data orchestration systems it can get complicated if you have to put the data routing rules in NiFi as needs change. Whhat KSQL provides here is the ability to focus in NiFi purely on the business logic of what to actually do with the data once it is pulled from the Kafka topics. The management of data flow to Kafka and within Kafka can be turned over primarily to KSQL.&lt;/p&gt;</content><category term="misc"></category><category term="nifi"></category><category term="kafka"></category><category term="data-engineering"></category></entry><entry><title>HBase Visibility Labels</title><link href="https://mikethomsen.github.io/posts/2018/05/07/hbase-visibility-labels/" rel="alternate"></link><published>2018-05-07T06:15:00-04:00</published><updated>2018-05-07T06:15:00-04:00</updated><author><name>Mike Thomsen</name></author><id>tag:mikethomsen.github.io,2018-05-07:/posts/2018/05/07/hbase-visibility-labels/</id><summary type="html">&lt;h1&gt;HBase Visibility Labels&lt;/h1&gt;
&lt;h3&gt;Basic Terms&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Visibility label - one or more tokens that may be combined with boolean logic to define restrictions on data access.&lt;/li&gt;
&lt;li&gt;Authorizations - one or more tokens that can be provided to HBase to evaluate against a visibility label.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Overview&lt;/h3&gt;
&lt;p&gt;Visibility labels are an expression that is stored â€¦&lt;/p&gt;</summary><content type="html">&lt;h1&gt;HBase Visibility Labels&lt;/h1&gt;
&lt;h3&gt;Basic Terms&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Visibility label - one or more tokens that may be combined with boolean logic to define restrictions on data access.&lt;/li&gt;
&lt;li&gt;Authorizations - one or more tokens that can be provided to HBase to evaluate against a visibility label.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Overview&lt;/h3&gt;
&lt;p&gt;Visibility labels are an expression that is stored on a cell that determines whether or not a scanner can see the cell. For example, consider the following row:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;patient-1:attr:name&lt;/li&gt;
&lt;li&gt;patient-1:attr:attending_physician&lt;/li&gt;
&lt;li&gt;patient-1:attr:diagnosis_1&lt;/li&gt;
&lt;li&gt;patient-1:attr:diagnosis_2&lt;/li&gt;
&lt;li&gt;patient-1:attr:medication_1&lt;/li&gt;
&lt;li&gt;patient-1:attr:medication_2&lt;/li&gt;
&lt;li&gt;patient-1:attr:billing_codes&lt;/li&gt;
&lt;li&gt;patient-1:attr:address&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some of that information is Personally Identifiable Information (PII), some Personal Health Information (PHI), some billing-related and some that doesn't need to restricted for anyone authorized to be in the system in the first place.&lt;/p&gt;
&lt;p&gt;To restrict that information, you could establish four basic tokens that a user must have to see everything:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OPEN&lt;/li&gt;
&lt;li&gt;BILLING&lt;/li&gt;
&lt;li&gt;PII&lt;/li&gt;
&lt;li&gt;PHI&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The patient's name and attending physician aren't particularly sensitive, so we could assign them just &lt;code&gt;OPEN&lt;/code&gt;. That way, any user in the system can at least figure out who the patient is and which doctor provided them care. A staff lawyer, for instance, might not need to know how patients were diagnosed or treated, but would need to be able to find out which doctor treated which patient in the event of malpractice claims.&lt;/p&gt;
&lt;p&gt;The diagnosis and medication are &lt;code&gt;PHI&lt;/code&gt; and so would be assigned that label. Likewise, billing codes would have &lt;code&gt;BILLING&lt;/code&gt; assigned to them.&lt;/p&gt;
&lt;p&gt;Now suppose you have a particularly sensitive field, such as one which details a medical report for patients who are victims of crime. You would need multiple restrictions on that, so you might add a new label called &lt;code&gt;LEGAL_RESTRICTED&lt;/code&gt; and assign both &lt;code&gt;PHI&lt;/code&gt; and &lt;code&gt;PII&lt;/code&gt; because the field would be restricted and cover both health and personally identifiable information. The way you do that is with boolean logic. Instead of just assigning a single token, you would set &lt;code&gt;LEGAL_RESTRICTED&amp;amp;PII&amp;amp;PHI&lt;/code&gt; to tell HBase that a scanner must have authorization to view all three of those labels.&lt;/p&gt;
&lt;p&gt;In practice, the way that last scenario would work is that only a handful of vetted users would have access to &lt;code&gt;LEGAL_RESTRICTED&lt;/code&gt;. The HBase user doing the scanning would have all of the tokens, but the application would provide the scanner with only the tokens for the current user. Dr. John Smith might only have &lt;code&gt;OPEN&lt;/code&gt;, &lt;code&gt;PHI&lt;/code&gt; and &lt;code&gt;PII&lt;/code&gt;, but Dr. Jane Doe could have all of those, as well as &lt;code&gt;LEGAL_RESTRICTED&lt;/code&gt; because she has been vetted by the administration to handle at-risk patients. When Dr. Smith views the record for &lt;code&gt;patient-1&lt;/code&gt;, that lack of &lt;code&gt;LEGAL_RESTRICTED&lt;/code&gt; will go into effect and the sensitive field(s) will not even exist as far as he is concerned (HBase won't even provide a key with a null value).&lt;/p&gt;
&lt;h3&gt;Setup&lt;/h3&gt;
&lt;p&gt;Set the following values in &lt;code&gt;hbase-site.xml&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;  &lt;span class="nt"&gt;&amp;lt;property&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;hbase.coprocessor.region.classes&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;value&amp;gt;&lt;/span&gt;org.apache.hadoop.hbase.security.visibility.VisibilityController&lt;span class="nt"&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;property&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;hbase.coprocessor.master.classes&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;value&amp;gt;&lt;/span&gt;org.apache.hadoop.hbase.security.visibility.VisibilityController&lt;span class="nt"&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then restart HBase for that new configuration to take effect. Visibility labels will work with simple auth, so you don't need to have Kerberos configured to take advantage of this feature in a development environment.&lt;/p&gt;
&lt;p&gt;To configure what labels are available do the following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;su - hbase (assuming &lt;code&gt;hbase&lt;/code&gt; is the user running HBase)&lt;/li&gt;
&lt;li&gt;hbase shell&lt;/li&gt;
&lt;li&gt;add_labels ["OPEN", "BILLING", "PHI", "PII", "LEGAL_RESTRICTED"]&lt;/li&gt;
&lt;li&gt;set_auths staff_user ["OPEN", "BILLING", "PHI", "PII", "LEGAL_RESTRICTED"]&lt;/li&gt;
&lt;li&gt;set_auths external ["OPEN", "BILLING", "PII"]&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The reason why there are two &lt;code&gt;set_auths&lt;/code&gt; in the example is that with this feature you can deploy multiple instances of your application against the data lake and tweak the configuration to provide a HBase user that has only the right authorizations for the class(es) of users that will use that instance. So in this example, the hospital has two instances of the application, one for staff users and one for external users that only need to see billing and basic PII about their patients.&lt;/p&gt;
&lt;p&gt;Each of the client objects in the HBase client API provides either a field for authorizations or labels. That tends fall along the lines of authorizations are for read operations and labels for write operations.&lt;/p&gt;</content><category term="tutorial"></category><category term="nifi"></category><category term="hadoop"></category><category term="security"></category></entry></feed>